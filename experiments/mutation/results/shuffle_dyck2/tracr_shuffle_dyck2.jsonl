[{"job_id": "739a764b78784fc3b4b6f80006eac399", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd04be31c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd04be31c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.82s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length + 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "abfe2263bf9b4c01acff877687604108", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff72ce5dbd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff72ce5dbd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.86s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "45b7f6fc042749ef918e8cbf53c6a19e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4a45179cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4a45179cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.78s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length / 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "aa3f1bcdcf3d43a2a82a8641394a84e1", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f6a74a59ae0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f6a74a59ae0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck2.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.96s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "7776608d2d7744f8a71ed8660d454c22", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f157485db70>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f157485db70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck2.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.99s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "8fcb76d0e5c74ec0a7250749dc6b5d2c", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f6e5d041ba0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f6e5d041ba0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length ** 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck2.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ** 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "baa123fd00574a63bc53d8e7bc7893b1", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f18d5e39c00>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f18d5e39c00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck2.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "c3baf898eefe4bc0b6bc5be2c72af809", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbb7b245d20>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbb7b245d20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck2.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "ea5ea8af42b944e2a3bbd6caa6711042", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f07aa85dcf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f07aa85dcf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 36.38s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length | 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "ab6e2bce28254343bcfbac861ac3c0f2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5c9a37dc30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5c9a37dc30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.51s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length & 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "369799f64e40478cbf28dd9dd2534dec", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f222857dc30>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f222857dc30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for ^: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck2.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "e0695e4c39d24014a8669430702edf55", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Add", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ss('Attention patterns can currently only average binary variables. Not:', {0, 1, 2})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative + (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "2502e75ef4b74f2ab69c58404bfd6508", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Sub", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ss('Attention patterns can currently only average binary variables. Not:', {0, 1, -1})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative - (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "c8af14eef4ac4daa8cb1fe13c649a611", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mul", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f05ee26dc00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f05ee26dc00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.89s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative * (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "41508ee8e6824a9cbfdd76b0340a82ad", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Div", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.91s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative / (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "f3a696c3c3074a83ab5ba5f6925e27c7", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_FloorDiv", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1412081c90>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1412081c90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n>           any_negative = any_negative // (balance < 0)\nE           TypeError: unsupported operand type(s) for //: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:110: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 2.18s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative // (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "8f52b03ed4c540449120b8359af09147", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mod", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7faf06271cf0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7faf06271cf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n>           any_negative = any_negative % (balance < 0)\nE           TypeError: unsupported operand type(s) for %: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:110: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative % (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "8a49c9486b274e1fb182802d2995c6e6", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Pow", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa4ff881c60>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa4ff881c60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n>           any_negative = any_negative ** (balance < 0)\nE           TypeError: unsupported operand type(s) for ** or pow(): 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:110: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative ** (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "85102b6991224d8385e485314d4adbab", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_RShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f60fa981cc0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f60fa981cc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n>           any_negative = any_negative >> (balance < 0)\nE           TypeError: unsupported operand type(s) for >>: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:110: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 2.03s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative >> (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "60c25a50de884fc1a63e1531d1421f87", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f470b15dbd0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f470b15dbd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n>           any_negative = any_negative << (balance < 0)\nE           TypeError: unsupported operand type(s) for <<: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:110: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "66068ba3509d4412aa5c672526eacd98", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitAnd", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f65d297dbd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f65d297dbd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 47.06s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative & (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "005635e169bf46d4866dccba5e832950", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitXor", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f887e96dc00>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f887e96dc00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n>           any_negative = any_negative ^ (balance < 0)\nE           TypeError: unsupported operand type(s) for ^: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:110: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.99s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative ^ (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "ab0148076780440fa908a93588ba0dac", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.88\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3e11459c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3e11459c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.68s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero + (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "a97dc049b95f4ea388fa8ecc6585c2f5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.72\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fda10659c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fda10659c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.88s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero + not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "82b6d30eff144b9d8437ad852d17ea61", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.84\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7feeed095ba0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7feeed095ba0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.99s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero - (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "49455d882e3d49afb4e49f50d3cef113", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.72\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f253446dc30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f253446dc30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.24s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero - not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "040e01b0d5b546b0a1375c13da519990", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero * (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "6b11ad2c05684d758d04c33ba8ac1872", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 37.25s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero * not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "69a467747bae4376a220bdd7ed48fbe2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.94s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero / (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "c254238053d34224a223908456b8139d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero / not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "e463d29ae57e40e3b409cf49ca762ade", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdc6b191b40>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdc6b191b40>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n>           all_zero = all_zero // (balance == 0)\nE           TypeError: unsupported operand type(s) for //: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:127: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.99s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero // (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "e8f73d24d04a4fa9b7445ac2017c6ffe", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f77b5b75b70>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f77b5b75b70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero // not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for //: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck2.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.96s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero // not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "9fc383838870420b893c047cfe51d3f9", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4e1f461b70>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4e1f461b70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n>           all_zero = all_zero % (balance == 0)\nE           TypeError: unsupported operand type(s) for %: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:127: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero % (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "9cb26882bd8048488281dea16665cbfe", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2f37471c00>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2f37471c00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck2.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "b3ebc17f688241e88f97f8be1dfb2bbb", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f15c5779c60>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f15c5779c60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n>           all_zero = all_zero ** (balance == 0)\nE           TypeError: unsupported operand type(s) for ** or pow(): 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:127: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 2.00s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ** (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "332d1aea462e4915aa01391f2ed6cdd8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4f09b69b40>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4f09b69b40>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'Aggregate' and 'Map'\n\nsource/shuffle_dyck2.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "67f103a8782440fcb6b54882cf083226", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdd16c55c90>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdd16c55c90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n>           all_zero = all_zero >> (balance == 0)\nE           TypeError: unsupported operand type(s) for >>: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:127: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero >> (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "980275dc79364b55a307ff3d3ae86b92", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa86aa5dcf0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa86aa5dcf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero >> not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for >>: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck2.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.95s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero >> not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "7b14304d4c55405b998b3323fca080ab", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f31459a1c00>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f31459a1c00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n>           all_zero = all_zero << (balance == 0)\nE           TypeError: unsupported operand type(s) for <<: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:127: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 2.03s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero << (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "278c14a1ecaa4f5aaa25fc485332b9a3", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f33fd75dc90>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f33fd75dc90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero << not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for <<: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck2.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero << not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "f5be803c00b64efaa71d5336b490f7ab", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.88\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f02d7451b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f02d7451b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.17s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero | (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "677f736668c24218aeea2e4fc5d51d7b", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.76\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f65f6a3dc00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f65f6a3dc00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.22s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero | not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "5bb92b9f90834fe0bd024d70dc7c4675", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc102481c30>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc102481c30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n>           all_zero = all_zero ^ (balance == 0)\nE           TypeError: unsupported operand type(s) for ^: 'Map' and 'Map'\n\nsource/shuffle_dyck2.py:127: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ^ (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "f4c2c5a62a014ab895a8d8b3206e77fc", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7dcab81b40>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7dcab81b40>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ^: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck2.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 2.04s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "700506f78bf04a17a9d30ccde2ad7727", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbd04e5dcc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbd04e5dcc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop != open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "d1441ad15fdf431a8a232a0cdd95e79a", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdb3f859b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdb3f859b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.53s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop != close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "7b3eeff8a57e4ddd99da882899f50035", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f110ff4dcc0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f110ff4dcc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) != 2\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 2.01s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) != 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "dafb5813b245421fb196ad37437eeab2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdf84949cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdf84949cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] != 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "9abd05f952dd4a12aed225f77a4efb0a", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.86\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f225ad61cf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f225ad61cf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance != 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "37fc05f7d9a64f669aa5bac06fdff087", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7564759cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7564759cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 29.13s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop < open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "0e299619eee14fdaa1d2139329743518", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f239ba41c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f239ba41c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.39s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop < close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "58377333da5c426380035d0fde61477e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f772ea55c00>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f772ea55c00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) < 2\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) < 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "49a561dc95c6468c819d8d2b594377bd", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f31d0489c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f31d0489c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 42.47s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] < 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "dbb472fb358544d1bebb7f42d820842a", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc754e45bd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc754e45bd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.25s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance < 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "01bfa373979d4aaba561dfdfe7a234ff", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f435397dc60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f435397dc60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.32s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop <= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "c927840df22147be917da2ef391c0f8e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1dbeb7da80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1dbeb7da80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.43s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop <= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "d057e5d73047438d8f89dc4264220c52", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.10s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "f04bb493139a4b91b7e997855ed2c4dc", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 40.37s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] <= 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "6292733c5b604e3eb5e458bf3b0cf234", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.15s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance <= 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "1ba5aed809134a7ba0c521a672f8a442", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f306b045cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f306b045cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 47.04s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop > open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "c2244276d5e54b748f808f54b7f46804", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9c85061bd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9c85061bd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 29.64s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop > close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "13e54316eb16400489a5abe6e2a7d08d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff95606dc00>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff95606dc00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) > 2\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) > 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "c9b4825ddb3f43d18b3ed7932a931548", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc964789c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc964789c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] > 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "4c52dfbe8ed243f5bc9f6d4ea98f8813", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.86\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f153a361c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f153a361c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.27s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance > 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "cdb36484dbd54225afce2a69644a67d0", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f22cd455a80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f22cd455a80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.66s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop >= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "c26e708f16794d7cbbfd3b078e680f47", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9488849c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9488849c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.49s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop >= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "744d3aaa91324822b9a87eb9adbd8cdf", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 43.57s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) >= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "1bdc4c3b11b046dd9c2c0b930c7bad06", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.98\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f728b859c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f728b859c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] >= 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "27b2ff9d537146fb8650efe8004fcb48", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f029e175c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f029e175c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.19s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance >= 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "a613c205a84641a880ab7807fa1c5fc8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f494737dc90>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f494737dc90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\nsource/shuffle_dyck2.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck2.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is open_token).named(\"bools_open\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AttributeEr...\n========================= 2 skipped, 1 error in 2.02s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "b6cc5d75ea354083a02408d6e55914c4", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe610b85c60>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe610b85c60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\nsource/shuffle_dyck2.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck2.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AttributeEr...\n========================= 2 skipped, 1 error in 2.01s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "416a08a302e34503ab933429c7b423f1", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0bb1591c60>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0bb1591c60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\nsource/shuffle_dyck2.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck2.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AttributeEr...\n========================= 2 skipped, 1 error in 1.44s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "2b34c250f18c400792fc44cbcfbcf782", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fee9765dc90>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fee9765dc90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\nsource/shuffle_dyck2.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck2.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AttributeEr...\n========================= 2 skipped, 1 error in 2.00s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "eb4c454f0c244388831e6dceea7c2cf5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc46597dab0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc46597dab0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 42.40s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] == 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "39ef46778e1040c692ec68a3fd08768f", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fafa3579c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fafa3579c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.22s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance == 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "dd5f6dfa4c2842c2a99b15bb718d5733", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc3f0e81b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc3f0e81b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.01s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] != 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "6bfe69a18fb8440a84e41f6a35ee98b8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3a4f17dbd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3a4f17dbd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 43.99s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance != 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "049109ded912437ca4ea1d5dc325e7a1", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc694789c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc694789c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.62s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] <= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "a876fc023e8c4011badc4cf23ffc1b33", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3c65635bd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3c65635bd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 43.65s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance <= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "3582562709dd4c0ebae590350d12e35d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f90d4975cf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f90d4975cf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 49.56s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] > 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "01013a42fdbf456d91865c337c576ebe", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f581ad75c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f581ad75c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 43.53s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance > 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "488108fbb7fb4c2d9dce2feca39c7dab", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1c98851ba0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1c98851ba0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 52.19s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] >= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "7ade4ecb1aa7441caad4ebc299a15f13", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f8082489c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f8082489c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.43s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance >= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "b281cb56d9134f31aea9a12dd74e51b4", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Eq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa6caa65bd0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa6caa65bd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) == 1\nE       AssertionError\n\nsource/shuffle_dyck2.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) == 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "9f8c5f63f4cc45d8a8a13bd2ace44644", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_GtE_NotEq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.53s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) != 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "21bef476e7504a018f6278ae007dd27c", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Lt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f8784a619f0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f8784a619f0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) < 1\nE       AssertionError\n\nsource/shuffle_dyck2.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.24s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) < 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "eec6d39d04f04f099c82de61c7c7f0f7", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_GtE_LtE", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f71c8a55c60>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f71c8a55c60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) <= 1\nE       AssertionError\n\nsource/shuffle_dyck2.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) <= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "23593b9031a348d9b4ff62036a98ba16", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 38.79s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "86b704775e4a41459501c4b6ce048859", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb015585c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb015585c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 28.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, +1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "e2741a0b073d4bc492fa30b51d81df4e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fab55471c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fab55471c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.27s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, ~1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "f34ca4d7bc3c4ea19b431cd0fa0e7dd0", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f26f3965b40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f26f3965b40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 18.08s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, not 1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "236e1ecde70c49a1b2a2f5d5856ceafd", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0929d6dbd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0929d6dbd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 27.29s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "5953053357b343deb1e5be86026840ee", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_Invert_UAdd", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f458dc35b40>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f458dc35b40>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (+has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary +: 'Aggregate'\n\nsource/shuffle_dyck2.py:134: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -131,7 +131,7 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (+has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n \n "}]
[{"job_id": "63c3476395824f8f9d79f81a385744fa", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_Invert_USub", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb60e659c90>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb60e659c90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (-has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary -: 'Aggregate'\n\nsource/shuffle_dyck2.py:134: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - TypeError: ...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -131,7 +131,7 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (-has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n \n "}]
[{"job_id": "f043c2f9b3da40d7922fa8d0bd01a621", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_Invert_Not", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f468e239c30>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f468e239c30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (not has_neg).named(\"not_has_neg\")\nE       AttributeError: 'bool' object has no attribute 'named'\n\nsource/shuffle_dyck2.py:134: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AttributeEr...\n========================= 2 skipped, 1 error in 2.18s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -131,7 +131,7 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (not has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n \n "}]
[{"job_id": "edbd5fc2492d42b3ac52f7f0bbf4a809", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ReplaceUnaryOperator_Delete_Invert", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nshuffle_dyck2: (Non-linear) SequenceMap only supports categorical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -131,7 +131,7 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n \n "}]
[{"job_id": "1cd21f5ddd634f7dba78bd5c0373b7d0", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5ee2e55c90>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5ee2e55c90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert not len(pairs) >= 1\nE       AssertionError\n\nsource/shuffle_dyck2.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.96s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) >= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "5dae931a00384341a92820a473835258", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/AddNot", "occurrence": 1, "start_pos": [100, 15], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5192051cc0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5192051cc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert not len(pair) == 2\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert not len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "22c873e0a87c413386d5a974af2925d8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "a1769d28b42547fd9baea3a3d8e08611", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= -1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "99b05a297e7e445a9ebf48e3184b3c8b", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc75819dc90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc75819dc90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 42.25s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "50f439162c2447a88350a646efe5a971", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3580965ba0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3580965ba0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 17.46s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "03d12275e5fd49b4853b8a3c8c5f4cfa", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 4, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3831d6dc90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3831d6dc90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 48.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 2))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "829a5017ffdd4d8ba9ee8dc5b90a4568", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 5, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa0fea55c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa0fea55c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 17.69s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "c99bc14de27c4d4797a885924c44942b", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 6, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 38.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "79ac7e923177458ebfbfa1646ac5a8b9", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 7, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 40.38s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "d9c8bec7d9d547b0a0e262d3d408f4b4", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 8, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fec1e161cc0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fec1e161cc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.95s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "d833b91ac39b401f8d71eca3c8ac5c26", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 9, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f63be465cf0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f63be465cf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 2.16s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "1dd788ec662c4925be2d6e291456bd80", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 10, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 40.16s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "aa499232083a4ed0855678d0fbc51abb", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 11, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.80s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "7ecc529eb8204c02abecb2a0e780abda", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f05ddc49ba0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f05ddc49ba0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.71s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "237c2c6b3ff241ae8c4f3f522782131d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 13, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.56s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "5ccf8d188da1487cb4c41ef4a2707dea", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb6b276db10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb6b276db10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 29.47s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "d5f1dae5374c4332bfddb80ecf098f1e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 15, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 51.84s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "d0d7f12884c4448cb003db60505d80e0", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 16, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb717459c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb717459c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.13s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < 1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "054355fb70744f64816d022fad4a2feb", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 17, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc59a97dcf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc59a97dcf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 48.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "bc839878ab5d4372beeebd0abd62b76b", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 18, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "be50fe7103cc4628a7a18706b20100b4", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "89fc561ffff44909b19fcac3e4f0de37", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 20, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.98\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbcdad7dc90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbcdad7dc90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.66s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "ab5a87b6e79847d9831160bfd561f473", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 21, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.98\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4202e65a50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4202e65a50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.56s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "8c2197d22c5e43a8b10527f4d69c6920", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 22, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f425cf6dc30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f425cf6dc30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.07s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "0aac7d85b0c441658ce8adbc70fbb50e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 23, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb104851c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fb104851c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.17s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "626c78769d9b43b7beec6e8f954fb192", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 24, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5ec1285c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5ec1285c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.25s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "08771e8adac34845967ce71bf09ff185", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 25, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3f91b5dc60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3f91b5dc60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 46.28s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "aeb3948cac5a4ab98deed05ab1a9bf8a", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 26, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2881d89c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2881d89c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 47.76s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "5fe030ef5c4448aa9e40a20b4317b828", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa191d5dc00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa191d5dc00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.77s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "e063d10e6bfa4a478b4905dd7e83193e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 28, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd3f7d8dae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd3f7d8dae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.62s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3f413b7a78124a4cb47009f7ccebf951", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/NumberReplacer", "occurrence": 29, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd7f8575c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd7f8575c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "8f31741da3b44512b0a51f888952c9a8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 0, "start_pos": [99, 16], "end_pos": [99, 21], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd98de59cc0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd98de59cc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in []:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[0] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck2.py:108: IndexError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - IndexError:...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -96,7 +96,7 @@\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n-    for pair in pairs:\n+    for pair in []:\n         assert len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance("}]
[{"job_id": "c53ccdff442d4be69a4743eda559897f", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2e233a5d20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2e233a5d20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 29.61s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "06a0792fd9604d0ba8fca1b7c544b1fe", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f614254dc60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f614254dc60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 36.56s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "6cda0099dbae42a9aed589777899600e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3a59a49cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f3a59a49cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.90s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.EQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "7ab2f92b90cd4c998980dd870e9fe34c", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.78\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fcc0f685b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fcc0f685b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 53.42s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "0d912100927b423fa44226fa02e277f3", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.92\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fac7bba1bd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fac7bba1bd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.01s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "9617ecc36c534ba380b0ce8dee724693", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.78\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f508a799c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f508a799c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.34s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "ae84b4a365844ab193eb7db1072bea14", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.92\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbaa2f75d50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fbaa2f75d50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.46s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "7bc553f763e84a6089a52a1688eb1731", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5199779c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5199779c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.81s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "e9e04ebeb9794ab588251222079f2c14", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7311049c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7311049c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.59s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "ce9e2c057e8345aea7e750bb7d02e625", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd7b0651c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fd7b0651c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.44s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "41a4e1812ff64a0294c5e75212f2b100", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9d01075ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9d01075ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.15s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "5e2c195e76db419ba1c726122e775758", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.88\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1a4117dcc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1a4117dcc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.40s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "ba7b08f132434503bb774b5f766c5ceb", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.88\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4fe2d85d20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4fe2d85d20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.14s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "6c1ed11009df4f73a44325d2ae77f4dc", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7faa71b7dc00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7faa71b7dc00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 44.16s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "017b679ca72749f6a3022d4f7d71aad6", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4d8c831c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4d8c831c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 42.03s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "514a02fb06dc40a2ab218aaba47b6d5d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f26af441c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f26af441c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 36.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "33b9aefaa3e94ee4837f5a0f1fb259b3", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ffa6db8dbd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ffa6db8dbd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.89s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "a0f07af2257b411f8fbd873cefb096af", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe476d81b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe476d81b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.32s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "3d3a8ada8d8c463ab4250b7347f7c4e5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f73d3b95cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f73d3b95cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.37s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "65d57ca27e724fa0837852e7d920330d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fcebf36dc00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fcebf36dc00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.50s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "d3542ba44eee45268e9a4dabbb2ce0b0", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f8058b81ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f8058b81ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "a16c4a8eec1d40e79f037450617e99dd", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.63s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "a9da4a9c399f47d2b6e88546ecadcec5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1c9d43dc90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1c9d43dc90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 43.83s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.FALSE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "d3f4dcfaa9644f4c8002d4df3ea179a6", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 21, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7ebcd7dc00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7ebcd7dc00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.57s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "0bb717bb18eb47faba75f6fd3b970727", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 22, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f970cb65d80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f970cb65d80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.18s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3e613936ef8d47bc9fc6fe77ddefa0d2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 23, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7a99181c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f7a99181c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.81s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "2516edcae6fc4e8aa29d0fc2dbdf39a0", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 24, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f060c461c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f060c461c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 46.51s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.GT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "146ec6f68c9849ed85451ccd792a3d2f", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 25, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.14s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.GEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "d23b4b9d2073423c82f31c1142616f50", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 26, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe999245cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe999245cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.66s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.NEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "b6fae56cf4f94090adbc08974b321c18", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 27, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f92e0f75c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f92e0f75c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.91s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.TRUE).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3200e42e39084614a8903a8b2200cffe", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "87dc56cccab84d37bbe38cc7c5bf7e16", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7faaff869b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7faaff869b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.55s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "c7133b2ce1e849e3bb076d3f7df07162", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdd3b37da80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fdd3b37da80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 46.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 2))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "10e24953d08945ff8d0afcaf33fd5fe5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 37.00s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "a1c65b331c9f472784ea3cf0bbfd49e2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fde1b475bd0>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fde1b475bd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.40s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "ced9939c3dc641809b684ef133983f07", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 40.71s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "171ed6559cb148bab060faa061736eb7", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f223b789c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f223b789c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 44.24s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "d2d8baa887f746918b0aaaf3984d87d7", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9813a51c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9813a51c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 31.40s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "f486fed4691b4d0ab42c83bae10d0cc2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f6eca181c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f6eca181c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.20s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < 1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "1a7e387dfd07449689856cf9e4cd5b03", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.87s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "9b126b9464bc4f44831c8462f9f5e05c", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.98\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f810c169c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f810c169c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.17s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "ea356cbc194a4cc2b21a45ab82837070", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4d14969c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4d14969c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 43.16s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "5d1a486df6284126a3dcf6583e0cacf6", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 12, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0dbaa59ba0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0dbaa59ba0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 33.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "59084cae469b4541bf912205cc7b7ffc", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 13, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2ded175ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2ded175ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.14s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "1948bc87c424425e8f1815d80a45397c", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fad3cf65c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fad3cf65c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.79s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "8500d50b68d14c8b82d3b84cf09836cc", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= -1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "baa185edb53843beaba637745c7f4f49", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fcebae69d20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fcebae69d20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 17.10s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "d43d12413733472781a26c8a6c7dddd8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1f73c5dcc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f1f73c5dcc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 16.83s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "9a9bfda7dbc44b89a527b7732f796a71", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.13s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "ff301c06ec2e408f8d69375e16182307", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssE\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of TestShuffleDyck2.test_model _________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa7a4655c30>\nmethod = <bound method TestShuffleDyck2.test_model of <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa7a4655c30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck2(), \"shuffle_dyck2\")\n\ntests/test_shuffle_dyck2.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck2.py:139: in make_shuffle_dyck2\n    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()', '{}']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck2.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "108ac02de897490e9e20c5d6376a3ba1", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 42.49s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "89f80aa15c5441d8966e3206259c6699", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.47s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "c2685211d1254490ab232614f430c731", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 49.84s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "7e9e57d58c25441a96b532bcda228e75", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f036b855ab0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f036b855ab0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.62s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "ac81bab233714bc686b0d154c2a50f40", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "ce08a498d3de45259f1443176c4c0b02", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.98\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0debda1b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0debda1b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.65s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "5c73e97cd9ca4060b3dee677d1a60fe5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff171c79960>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff171c79960>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 37.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "1ed96a6204b14ec68378d607de48bff2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 12, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f15b49a9c60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f15b49a9c60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 48.67s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "a7dcf0e83e144710a5639f2cf6af6374", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 13, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa158149d50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa158149d50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "c827246a61d94ef09b292052eeef37c8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0121641b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0121641b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 44.08s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "9807cba785164024b83013a1be99ff14", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f25dd559cc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f25dd559cc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 54.70s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices + 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "5944b0fbd1004d1593b746ed084f9e24", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 55.18s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "24c22f032f46464cb40fc77e87c30acc", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 42.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices + 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "8faa359d2dd84a6496772aa8ad5c44cc", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 40.27s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "cb8656ba37514a2db2c75883486990be", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa35ad85bd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fa35ad85bd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 48.06s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "1c4145a2114144508f5b1bb173e64ded", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 51.74s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "7c67f543db8748f0bb136a39854dea71", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2a87e41c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f2a87e41c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 57.18s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "d65da572be384838a3847b36cf82b5a3", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 44.14s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "af2e546ea4af41afbd5fad8e3ed48369", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 48.16s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "9b320ae76ebd489890b4ccaeb9592021", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0823c51bd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0823c51bd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 41.89s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices - 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "121c454bc30647e2ab4f8ca8734a8229", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [20, 4], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0378891d20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0378891d20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 39.31s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "c39fe045e9e640b3a51417ea3bab2988", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [45, 4], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff2b577dc90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff2b577dc90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 48.43s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "3f1f5d2d499d4a3f9d3b1eda2e07f668", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [77, 4], "end_pos": [77, 45], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0ed4585c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f0ed4585c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 38.62s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -74,7 +74,7 @@\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n-    return pair_balance.named(\"pair_balance\")\n+    return pair_balance.named(\"pair_balance\") * -1\n \n \n def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:"}]
[{"job_id": "307101aad83945c08d3bbe7c75b6d5ef", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [135, 4], "end_pos": [135, 58], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f71e525dc30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f71e525dc30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.05s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -132,7 +132,7 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero & not_has_neg).named(\"shuffle_dyck\") * -1\n \n \n def make_shuffle_dyck2() -> rasp.SOp:"}]
[{"job_id": "5876fa8a7c5e4f8d90b4bd4a5b11957d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 4, "start_pos": [139, 4], "end_pos": [139, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5bb9a51c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f5bb9a51c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -136,5 +136,5 @@\n \n \n def make_shuffle_dyck2() -> rasp.SOp:\n-    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\")\n+    return make_shuffle_dyck(pairs=[\"()\", \"{}\"]).named(\"shuffle_dyck2\") * -1\n "}]
[{"job_id": "0fbcd5676d594e88878db093dd5ca140", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [17, 24], "end_pos": [19, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 40.70s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens * -1, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "af314eba332f4028b77c890d2bf32ddf", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [17, 24], "end_pos": [19, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 42.96s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens * -1, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "92e86d2d0d684bf5a2980b4fa1166c02", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff045a61c90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7ff045a61c90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 57.94s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices * -1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "172d04e6ae4f4cb09fdf88b488b628cb", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.52\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7efe6bc55c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7efe6bc55c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 53.71s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "69790c11e51f4021b4b161dc57114c41", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 42.68s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices * -1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "469058bf80194a0aaf9bb1f6b7af8f28", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 44.20s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "01d2669a71724ac7b1eca926c554ace5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 6, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9855385c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9855385c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 49.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices * -1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "79eeb82087e44128b9ef68305a965281", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9d21461cf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f9d21461cf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 44.14s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "6599bdd98a554525a7d764597d0bb430", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nopens: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \ncloses: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nopens: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \ncloses: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.95s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools * -1, default=0)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "a0a05505b26e471b9382df20fad9e9d8", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "5d339f1c3ebf4af5a5beaf9d38a1472a", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 2, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.97s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -129,7 +129,7 @@\n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero * -1).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "3c35b70214b84c3c8d17303fb0a6929b", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [20, 11], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.82\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe082e3de40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fe082e3de40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.03s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "0d02d57daa6f46928856bd4411c7a093", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [43, 12], "end_pos": [43, 33], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nopens: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \ncloses: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nopens: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \ncloses: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.96s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -40,7 +40,7 @@\n       frac_prevs: SOp mapping an input to a sequence, where every element\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n-    bools = rasp.numerical(bools)\n+    bools = rasp.numerical(bools) * -1\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n "}]
[{"job_id": "2e010127cb284b75afa262b5c0ba5061", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [45, 11], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4119645c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7f4119645c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 45.71s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "41286089ec9a4352879bf833bb65d7f7", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.82s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0) * -1).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "5e1ab537c6d94cf3944b3b27e66b3c40", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 4, "start_pos": [70, 17], "end_pos": [70, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\") * -1\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "11903add3d774bf09690d5cb3f00b73e", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 5, "start_pos": [71, 12], "end_pos": [71, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nbalance_{}: LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -68,7 +68,7 @@\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n-    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n+    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\") * -1\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")"}]
[{"job_id": "6d6726846564433e96dd6e9a563cf4b5", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 6, "start_pos": [73, 18], "end_pos": [73, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\") * -1\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "15c4c973249b4185b4d137478707055d", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 7, "start_pos": [74, 13], "end_pos": [74, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nbalance_{}: LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.87s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -71,7 +71,7 @@\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n-    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n+    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\") * -1\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n     return pair_balance.named(\"pair_balance\")"}]
[{"job_id": "b64a7206be774c8c922c81af831973ab", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 8, "start_pos": [76, 19], "end_pos": [76, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n_________________________ TestShuffleDyck2.test_model __________________________\n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc738999c30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck2.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck2.TestShuffleDyck2 object at 0x7fc738999c30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck2.py::TestShuffleDyck2::test_model - AssertionE...\n======================== 1 failed, 2 skipped in 40.61s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1)) * -1\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "64ffb240be394e15b43c5acfced30418", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 9, "start_pos": [113, 19], "end_pos": [115, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -112,7 +112,7 @@\n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n-    )\n+    ) * -1\n \n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\""}]
[{"job_id": "5d366ecfe20242dfa82a1363d1a3f4ab", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -110,7 +110,7 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n "}]
[{"job_id": "366d0afed90d4f39a72529d39bb413f3", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 11, "start_pos": [120, 14], "end_pos": [122, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 48.62s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -119,7 +119,7 @@\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n         \"has_neg\"\n-    )\n+    ) * -1\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0"}]
[{"job_id": "0af89aaddc56473da1503eafe7aa9280", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 12, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0) * -1).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "582fd4f327ad4827a53d245aeee11eb2", "mutations": [{"module_path": "source/shuffle_dyck2.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 13, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck2.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 53.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck2.py\n+++ bsource/shuffle_dyck2.py\n@@ -129,7 +129,7 @@\n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\") * -1\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
