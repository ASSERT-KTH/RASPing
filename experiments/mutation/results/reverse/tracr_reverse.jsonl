[{"job_id": "2564f0095e7d430d88cb958a8e948972", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.078\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x72a20beab980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x72a20beab980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 43.71s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length + rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "1aa0f3964b2d4976b53f9a597d4459ee", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.03\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x77b2366e7e30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x77b2366e7e30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx + 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "2bc16eafba6448c580896f10233842ec", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.018\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x752369fcf980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x752369fcf980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.94s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length * rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "18640e2227e24d87b092fc2eb97e7e61", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7e289b594440>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7e289b594440>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 44.16s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx * 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "cd15dcdcbafc46008e31c8c3a3e3c54c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.44s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length / rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "a023015ef8a8467687afdd66711d4fa9", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.026\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x76f8b4ec3980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x76f8b4ec3980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 57.51s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx / 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "2b2ce767e1dc4adeb39baaabe09f9b31", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x711bf99f3980>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x711bf99f3980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length // rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.77s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length // rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "9214c07c1a6a48e9ae1b270bc673a65c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x77cfed223980>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x77cfed223980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx // 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for //: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.37s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx // 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "2014f94f6a7040b4a853bdf295628979", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x784783179460>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x784783179460>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length % rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.85s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length % rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "017c7c82c1094f5e95dd5d3e59841a5e", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7e6d4f6439e0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7e6d4f6439e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx % 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for %: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.45s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx % 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "4f54b128831e4e08a47c133c6834c755", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7362ed58f980>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7362ed58f980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length ** rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.69s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length ** rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "0976b1e455dc4859a0b9067ff070cf52", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7234ac093980>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7234ac093980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx ** 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.38s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx ** 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "08bbb04a1a40487aa4763cc5e77850f3", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7d5072586840>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7d5072586840>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length >> rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.75s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length >> rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "355fe40272de4ccbb94a3ab8da5519ac", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7953058ff980>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7953058ff980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx >> 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for >>: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.94s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx >> 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "82ff53cb6d5e4aa8a1db26a90ad7e746", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7d104e9c4fb0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7d104e9c4fb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length << rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.74s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length << rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "3822955bbdc0451c926f8dd617bf8b2d", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7b9b9779f980>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7b9b9779f980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx << 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for <<: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.17s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx << 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "a43ab408ad354fe4b6bb127731d4e248", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.026\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x78984ec69520>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x78984ec69520>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.27s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length | rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "363776e5d40d4f978b457d6f3754ba2c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.028\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f4000ba79e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f4000ba79e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 38.41s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx | 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "857cbe521b6144d281f46e28c459ad77", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.09\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x75e91f05f980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x75e91f05f980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.63s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length & rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "bb5d607b29bf4749adba97a54544a7d9", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.028\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x742860f27980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x742860f27980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.46s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx & 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "902a8d1f2e5042fda6e646af545a7810", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7114033b7980>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7114033b7980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length ^ rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for ^: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.80s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length ^ rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "6af597c28b984cd483a4a26b22e396c9", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x792758b9f9e0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x792758b9f9e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx ^ 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for ^: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.84s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx ^ 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "696a20ebc5444b6e87b21f899b11aa4e", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 2).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "4ab63e6fc7d04762abde453562dd5f77", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.022\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x774e19ceb9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x774e19ceb9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 37.08s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 0).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "7b2824e5992745bca3878d5a3deb6056", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.028\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x76219294f260>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x76219294f260>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 38.48s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.EQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "2b7b86c7e26f45608e53524233c0fb6e", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.032\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7194ada9f9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7194ada9f9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.60s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "03e58ad3902c4cbb92bfc7bea45644d3", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.076\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x777909a4bce0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x777909a4bce0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 49.17s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "4bf0266251b84970bb1a9d5be90c920d", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.036\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x72145d0b4830>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x72145d0b4830>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.11s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "99b3db6a0ec04eb896a0ed24ed274f9a", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.118\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7cc60fb0b9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7cc60fb0b9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.90s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "597349cb760a46598c0be8c03749012c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.016\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x79fc655eb980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x79fc655eb980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 49.29s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "c3d6524219f74c059408162ab53a9f23", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.036\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7468cc0716d0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7468cc0716d0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.96s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "d4030636ae3248d89789cd24f99645cc", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x76a053d43980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x76a053d43980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.50s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.LT).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "8b78e71d8e4b43c59753fb0d0995b0c9", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.01\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7a25594d3980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7a25594d3980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.63s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.LT).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "387de644423941fe8107c1f837236872", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.122\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x79a13e9c7980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x79a13e9c7980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 35.65s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.LEQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "0a5a96f1cc1646a6af64ddd0e25b65c8", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.016\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7a65fde82420>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7a65fde82420>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 47.20s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.GT).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "785d1ea3c9774f059331806837653faa", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.134\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7299c8130410>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7299c8130410>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.23s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.GEQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "6c0bef773735431c919c438c866e4e7d", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.016\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7a6115993980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7a6115993980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 47.04s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.NEQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "d725acb839b946dfa03eadc4d0690d48", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x78ae77cadc40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x78ae77cadc40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 40.31s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.TRUE).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "7337197137b64be3afccf48da0a38463", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 2).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "8921d7a27cb54f0baacf15ee865647ba", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.022\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x77e78edbf9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x77e78edbf9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 50.87s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 0).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "cbdcb0d1906a46a5947a5e65bd103eb7", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [39, 24], "end_pos": [39, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.026\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7047b74c96a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7047b74c96a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 40.45s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length - rasp.indices + 1).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "239268a58bef4348835c1b7947c03788", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [41, 35], "end_pos": [41, 47], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.028\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7661208665a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7661208665a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices + 1, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "823fc6784ad74141a3c1e1ec9d84321e", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [39, 24], "end_pos": [39, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.034\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x778dbefb08c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x778dbefb08c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 40.25s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length - rasp.indices - 1).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "8faf8f973d7c4700bb52f42dbe8cf583", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [41, 35], "end_pos": [41, 47], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.03\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x76d7d86f1580>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x76d7d86f1580>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 38.57s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices - 1, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "86e488635d874c7d8224509a7770cc17", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [19, 4], "end_pos": [19, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.03\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x725441b70e60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x725441b70e60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.76s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -16,7 +16,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "735cc39515dd4c5e8d39f116930b56b6", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [44, 4], "end_pos": [44, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f6b62fc7980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f6b62fc7980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 46.07s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -41,5 +41,5 @@\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n-    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")\n+    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\") * -1\n "}]
[{"job_id": "22f8efe4f2c648128d4503010b8c8dfd", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [16, 24], "end_pos": [18, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 35.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens * -1, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "dc216bf0c51a470db0919bfb2ca4a089", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [16, 24], "end_pos": [18, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 49.56s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens * -1, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "5077a4d24d0a4c9c8e866ff34818860b", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [41, 23], "end_pos": [43, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.114\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x795919a16f60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x795919a16f60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 42.65s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices * -1, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "d72c3738475a4c3c8df82ec20fd213a6", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [41, 23], "end_pos": [43, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.098\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x78ae87fb79e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x78ae87fb79e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.90s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx * -1, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "9b11508e7c3c462bb65f1f46c09cbdc4", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [44, 11], "end_pos": [44, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7819ac2bf9b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7819ac2bf9b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 37.80s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -41,5 +41,5 @@\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n-    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")\n+    return rasp.Aggregate(reverse_selector, sop * -1).named(\"reverse\")\n "}]
[{"job_id": "6ff83ed955fe4e87a8af46b0045a63e6", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [19, 11], "end_pos": [19, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.022\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7390d7c27260>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7390d7c27260>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 54.19s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -16,7 +16,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "f184933a1a62422f8b784f1fc5359ad4", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [44, 11], "end_pos": [44, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x770f42cb79e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x770f42cb79e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 46.72s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -41,5 +41,5 @@\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n-    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")\n+    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\") * -1\n "}]
