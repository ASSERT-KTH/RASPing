[{"job_id": "492ee375ed69460ea749c64e2d333a72", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length + rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "4d480ac89b8e4dbfa7b96012bbe69bb1", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx + 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "d9f6ca55a1a94e0cbb3c1c25c7e7afe2", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length * rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "9e66f669522442cba78bde02cb287867", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx * 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "8860dfdf42f444f79e75b7aaa923075e", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.05s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length / rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "c1ca3fc912a048a4baa49783b5a62bf8", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx / 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "cf7195e7048048bea1b2c9014128dc4a", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fab652718d0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fab652718d0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length // rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length // rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "f3e67789526640b080e77adb2a559cb3", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f72d166d900>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f72d166d900>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx // 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for //: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.99s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx // 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "7aee9d32ecb74ae3a5f5d0432cda293f", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fd4d7681930>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fd4d7681930>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length % rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.94s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length % rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "ee84ad8a33c948838fea3cc017b44347", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fcf07671900>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fcf07671900>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx % 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for %: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.99s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx % 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "28cc51e3663c4221a5c2716385c2333c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f1f37165900>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f1f37165900>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length ** rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.18s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length ** rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "c898dc1eed6043578b25e5a59e8ab775", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f2bcb985690>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f2bcb985690>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx ** 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.96s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx ** 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "13f4f9f7a73e4441bb6e24b0fae3ab42", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fbb93a61750>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fbb93a61750>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length >> rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.33s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length >> rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "aefe404481ea4b0eb833d49f9672e86e", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fcfd4195930>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fcfd4195930>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx >> 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for >>: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx >> 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "1d9d61b2f0a84400a38b48123a7f27f6", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f7d74e45720>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f7d74e45720>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length << rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.16s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length << rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "f458c51c4da9429986235dc2fd423bc6", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fafad171930>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fafad171930>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx << 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for <<: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.01s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx << 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "a80bf4f52ca34d66810f8c103de683fb", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length | rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "2182a552fff34da5a83842ebc2a6bcfa", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx | 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "77c7c171a6c0417199a9b887ed95ece6", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length & rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "57db0ae7a8274391b9c0d19fd542fd76", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx & 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "8a44842e571e4e48a68e9b4a20164655", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f72361718d0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f72361718d0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length ^ rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for ^: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length ^ rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "0493be48151c4c85b37e34647d05eb9d", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f9636c49930>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f9636c49930>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx ^ 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for ^: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.09s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx ^ 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "126fab9f489242adbf23a961abbd36c8", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 2).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "5fb6140b359a41e28c8287b7086dc87d", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 0).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
