[{"job_id": "9db50f10314547858e52a5aff4bc2be4", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f942ee49a80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f942ee49a80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.44s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length + rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "f8cf569fa22e41ff9b87270de8ba7d07", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fdbca369a80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fdbca369a80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.06s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx + 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "530610b0d28d4bc185df99c4fcbc1ffb", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fcf0ff59a80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fcf0ff59a80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 22.59s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length * rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "41475796919243ffb0dfc23139fa2db1", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f089885db70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f089885db70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.31s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx * 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "82cb9a4b4a4144f3a3608b8864e43020", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length / rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "1af648e6628b4ee997edbc6489120f0a", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fbeabb699f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fbeabb699f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.83s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx / 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "0c9e4491d8e54ba3a3d359a005c40990", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f4f9f2559f0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f4f9f2559f0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length // rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.95s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length // rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "52f6692c77eb495da9ede2898324df18", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f809717d960>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f809717d960>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx // 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for //: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.92s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx // 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "f874b113972e4ac6b7bc0425faa9563b", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7ff177a49900>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7ff177a49900>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length % rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length % rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "2f44a1eece5d47e2b70377eec07d4ba1", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f0521369ae0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f0521369ae0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx % 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for %: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx % 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "1e18d1df3d584843aee0899c643aa38c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fba16c41ab0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fba16c41ab0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length ** rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.01s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length ** rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "3aaa8450ef9147c9bc59d95099a29eb5", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f7d00171b10>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f7d00171b10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx ** 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.96s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx ** 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "696720762dbc42a4853f71d97e0cd9ee", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f667dd69ab0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f667dd69ab0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length >> rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length >> rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "7cdae9ca27c24a6b93200ed62712ff1f", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f9a68b81930>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f9a68b81930>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx >> 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for >>: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx >> 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "94b3445229ab430ea4853fca9eda3a00", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f10fb375840>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7f10fb375840>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length << rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length << rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "261754db84e84cf987e06fe68442102b", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fe123c51b70>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fe123c51b70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx << 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for <<: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx << 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "ea122320afb54f7f8069b946a61cf9e2", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7ff54cc59ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7ff54cc59ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.08s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length | rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "23e890bf08d0413188c05874e395cf81", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f5561789ab0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f5561789ab0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.53s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx | 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "45c2904425624623b72c4a6255cb0915", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fae39185900>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fae39185900>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.74s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length & rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "dba0bf02b8fa41fa943c25de5851651c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7efc92a75ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7efc92a75ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx & 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "6ae80ce0e3e94a51acfc37eb53080eb7", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [39, 22], "end_pos": [39, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fd939771ba0>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fd939771ba0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n>       opp_idx = (length ^ rasp.indices).named(\"opp_idx\")\nE       TypeError: unsupported operand type(s) for ^: 'SelectorWidth' and 'IndicesType'\n\nsource/reverse.py:39: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length ^ rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "b4b096f57b68499aa4ca36ad308b7dff", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 1, "start_pos": [40, 23], "end_pos": [40, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssE\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of TestReverse.test_model ___________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fdba5959a80>\nmethod = <bound method TestReverse.test_model of <tests.test_reverse.TestReverse object at 0x7fdba5959a80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_reverse(rasp.tokens), \"reverse\")\n\ntests/test_reverse.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsop = tokens\n\n    def make_reverse(sop: rasp.SOp) -> rasp.SOp:\n        \"\"\"Create an SOp that reverses a sequence, using length primitive.\n    \n        Example usage:\n          reverse = make_reverse(rasp.tokens)\n          reverse(\"Hello\")\n          >> ['o', 'l', 'l', 'e', 'H']\n    \n        Args:\n          sop: an SOp\n    \n        Returns:\n          reverse : SOp that reverses the input sequence.\n        \"\"\"\n        opp_idx = (length - rasp.indices).named(\"opp_idx\")\n>       opp_idx = (opp_idx ^ 1).named(\"opp_idx-1\")\nE       TypeError: unsupported operand type(s) for ^: 'SequenceMap' and 'int'\n\nsource/reverse.py:40: TypeError\n=========================== short test summary info ============================\nERROR tests/test_reverse.py::TestReverse::test_model - TypeError: unsupported...\n========================= 2 skipped, 1 error in 2.02s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx ^ 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "0850dcd04ed44a8184ab3ab60ca1d53a", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fa4d517da20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fa4d517da20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.60s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 2).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "5d4ed34a59a849868c944ceebc77015c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f1c9d971ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f1c9d971ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.20s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 0).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "ce1921a639b74b33a2a954c3000838f2", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f7e6d481a20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f7e6d481a20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.89s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.EQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "40439e824e814688b6dda3aa0c180921", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f3233d7da80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f3233d7da80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.69s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "01e483de43db4373834f2817003848cc", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f2924745a20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f2924745a20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.38s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "581baacb6f204e9a9c3695a46249ab33", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f4b67b79ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f4b67b79ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.19s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "b1415c72ab2f4a9bb21a01eabcf93930", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f08641859f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f08641859f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.80s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "65a645cca1ff457b919b2dcb50da85e8", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f204fc69ba0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f204fc69ba0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.71s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "f11db60c4c82432d94ff00149933cf5d", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [17, 34], "end_pos": [17, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fa4abf55ba0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fa4abf55ba0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "42961ce879da41928d844ff2648a2548", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7ffb1765db40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7ffb1765db40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.21s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.LT).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "964fdbbf5adc4fdea390224f64bffcdb", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7eff4957dae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7eff4957dae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.06s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.LT).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "0cc6204d98fa4172b27d000b3be3608d", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f4499b6da20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f4499b6da20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.59s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.LEQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "7a22da3981bc49fd9e270d17c9fab5c5", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fc31d041a80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fc31d041a80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.70s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.GT).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "8d909e8ba08e46018de9baad798f4c40", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fc69be6dae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fc69be6dae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.70s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.GEQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "00f24a2a2e0e4966a37c5e0e3def140b", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f7019545b40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f7019545b40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.08s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.NEQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "0f9949757c35400bbc64e15c9322c17c", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [41, 58], "end_pos": [41, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f3fb8571990>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f3fb8571990>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.87s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.TRUE).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "67b117aeeb6b47db84e2d4c5d6df53a7", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fd5e1c45b10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fd5e1c45b10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.27s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 2).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "6f36284851774434ae8e401c73152345", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [40, 25], "end_pos": [40, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f161c471ab0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f161c471ab0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.32s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -37,7 +37,7 @@\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n-    opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n+    opp_idx = (opp_idx - 0).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )"}]
[{"job_id": "1d7bd46d0fe94a489aee6015c1ddbe1f", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [39, 24], "end_pos": [39, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fb748181b10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fb748181b10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.11s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length - rasp.indices + 1).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "bc221b3306294a7f8e7d985d2e02f8e8", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [41, 35], "end_pos": [41, 47], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fdc99d6dae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fdc99d6dae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.63s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices + 1, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "6005617aeb104a3290757d55901c1079", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [39, 24], "end_pos": [39, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f6a62a5da80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f6a62a5da80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -36,7 +36,7 @@\n     Returns:\n       reverse : SOp that reverses the input sequence.\n     \"\"\"\n-    opp_idx = (length - rasp.indices).named(\"opp_idx\")\n+    opp_idx = (length - rasp.indices - 1).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\""}]
[{"job_id": "55e0c563078a410380d4a89ef6bd11e7", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [41, 35], "end_pos": [41, 47], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7ff430489b10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7ff430489b10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.69s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices - 1, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "773b59dfa39548f485b791b0331ed40a", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [19, 4], "end_pos": [19, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f2b2a665c00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f2b2a665c00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.92s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -16,7 +16,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "8445fb2274d549c69ca49a006c5809ca", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [44, 4], "end_pos": [44, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f0f83455ae0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f0f83455ae0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.88s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -41,5 +41,5 @@\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n-    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")\n+    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\") * -1\n "}]
[{"job_id": "4170a3b804684cfbbd8c6f37f263df80", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [16, 24], "end_pos": [18, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 19.03s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens * -1, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "01ac224f2908449c8f2027bd137599ab", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [16, 24], "end_pos": [18, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 18.34s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -14,7 +14,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens * -1, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "67614d42462540829949c6e4c126003e", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [41, 23], "end_pos": [43, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f7d88d919f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f7d88d919f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.44s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices * -1, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "745a1a0fc1bf4deab22f869868b8f472", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [41, 23], "end_pos": [43, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7f679f64da50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7f679f64da50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.48s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -38,7 +38,7 @@\n     \"\"\"\n     opp_idx = (length - rasp.indices).named(\"opp_idx\")\n     opp_idx = (opp_idx - 1).named(\"opp_idx-1\")\n-    reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n+    reverse_selector = rasp.Select(rasp.indices, opp_idx * -1, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n     return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")"}]
[{"job_id": "1946361101134c2bab2a9d3e8ce2a16a", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [44, 11], "end_pos": [44, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fa878e39780>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fa878e39780>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -41,5 +41,5 @@\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n-    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")\n+    return rasp.Aggregate(reverse_selector, sop * -1).named(\"reverse\")\n "}]
[{"job_id": "801622fdd330428396ac87a175aeef9b", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [19, 11], "end_pos": [19, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fc8f3769b70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fc8f3769b70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.47s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -16,7 +16,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "e2fdce3b06a242a4a86a60f4be9ce7b1", "mutations": [{"module_path": "source/reverse.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [44, 11], "end_pos": [44, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_reverse.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n____________________________ TestReverse.test_model ____________________________\n\nself = <tests.test_reverse.TestReverse object at 0x7fc1da859a80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_reverse.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_reverse.TestReverse object at 0x7fc1da859a80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_reverse.py::TestReverse::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.15s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/reverse.py\n+++ bsource/reverse.py\n@@ -41,5 +41,5 @@\n     reverse_selector = rasp.Select(rasp.indices, opp_idx, rasp.Comparison.EQ).named(\n         \"reverse_selector\"\n     )\n-    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\")\n+    return rasp.Aggregate(reverse_selector, sop).named(\"reverse\") * -1\n "}]
