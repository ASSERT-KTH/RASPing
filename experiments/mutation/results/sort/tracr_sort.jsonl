[{"job_id": "c4c4ce644d6a473498816adb19095b39", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 19.52s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f35ba7e838874bba8335cd9ca5db2aa7", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fcba62919c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fcba62919c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2d6b0311e720438aa3a12510a7363a68", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f8a7d261990>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f8a7d261990>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.75s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3960d274e7524ab08a66e6d45b80ccd7", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f9f1f765a20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f9f1f765a20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.07s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4c14f91e243c4ea887094d88cb7e6245", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fd3611858a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fd3611858a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8ae64f1309904be69c4a4dceffe143eb", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f06d82599c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f06d82599c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.58s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "5b4a9d49b6854496bd134eda10e54c1a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.85s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e9b5642cdea34dd7ac5921bd59bd315e", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.02s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b8172a98c6c24ce0ba11825dbe265c55", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.84s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "09ff488d74e54b7ea10a66889106cee5", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "1c9b503feac04923b5a2c1f00e93613f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.86s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4b3d2c3f487647d89d21219fe71c2340", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "1bea0aca7ff1494f917d1b4be2ad843a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 20.43s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0c4b48d6cb2e4befa3e2d67987de813b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "3f690a5fe4fd403c8e090055a4f4e4f2", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 19.12s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "5159d1ed1ee74a2984a517eda2519a3e", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 19.44s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "42ea9ca6b41747d6a6e74473539d56c8", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.18s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "899492ed579b4929a9f4edd444ceb046", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "5a4b500401ea4e7997753e00a753f0ee", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f363056116014bd6a1e51eaaa5b1eddd", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "da30041399e14ed8b0accf68169b8560", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b5d60f119f4e446597a480564af34337", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "b9ed8a9d3a254bf08e4d5b534b554a42", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.18\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fd6aba39a80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fd6aba39a80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.54s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "946c96fe022c4562ad147cd8e5a62946", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "c64dfea2e7f442eeb99be5ce3ff916c4", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.85s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3c30beed93c54022a3a51e5cb940275c", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "0cca7bc3e46d4b9a9875f3bc0c2b2df0", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "85c3b35c8be74ccb9fc01e7b3a4e03d4", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "9e733f40fc1344d59b140e5ca83468db", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "934c6c5b1181449ba25f9b624fd293f3", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.39s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "6dba2dc3996b487fa6e51df8ac94423b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "30487b7fae4248d6a9a7ad422d91e096", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "cfb47588d6204c5caa3151fa98bb0eb0", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "33422c5ffcfb42948fde3ffa0df06b50", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f2b812619f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f2b812619f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.69s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "1209bdbc55e5458fbf26fae50e999a12", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f47ccb759f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f47ccb759f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 15.80s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "13014294f9354b6ca897421f1389cd76", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f96ef061990>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f96ef061990>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.27s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "77307d35d45349ae9364c2cfa209afe1", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.18\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f1b271899f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f1b271899f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.63s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ec01a4b9bc864a98aee3fa5d6c673db3", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f83b5079960>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f83b5079960>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.20s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "22f844c5d0224c699af6d17b2555dc57", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fdd24861870>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fdd24861870>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.31s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b28e0eabfabe4d3c8e2fb498cf9a7a99", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fd454579840>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fd454579840>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.86s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "6350b0c67cfc4f188e8a014dac6dcf9a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f0e694719f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f0e694719f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.41s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "87848615c39d482cb1d4e0e2aefca258", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f3868c49900>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f3868c49900>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3ab8430cfc574cdf9094f0fc5dde1b1a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fd6280659c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fd6280659c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "5cd2fd4402c64de3a1250e8c3bc7eea1", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fbde6635990>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fbde6635990>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.09s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ef8d56d8ac0b4d73baf7a3f2a7dda0ba", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f7963775930>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f7963775930>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.44s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "01eee04d5f294a8dbe3947115883098b", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f1fb0dada20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f1fb0dada20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.70s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "ccf0549775204f21a276abe3f801569a", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f7893d6d9c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f7893d6d9c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.51s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "b36f0bc04c2949fdb4d01889c430aea6", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f0381291900>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f0381291900>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.66s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "587801523fdb4fb791e6d0bdf0eee62e", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f90c5f79930>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f90c5f79930>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.06s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "30d108290ce143d9a845c92a8f9d09f5", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f3742e318d0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f3742e318d0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.72s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "9360986fb0c6462ab61a468646665a11", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f9fba06da50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f9fba06da50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.75s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "e3cc7c9dcc154685b2455cbb95cd3f92", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fed305a59f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fed305a59f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.79s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "f7b71fab4b2a4c1dad590c30a231eae4", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f607c045900>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f607c045900>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.11s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "3a0a0ce7f9c044f9969d78a57a9408f7", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f825ae5d9f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f825ae5d9f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.21s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "9585eccb62514324af14009a51d63a67", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f8aabf8da50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f8aabf8da50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.25s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "c447c3be6fe9434e8c88b8fe7a7c558f", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.1\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f040a9759f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f040a9759f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.18s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "17a90c569caa4ad8bf1e78c6d89fcdfa", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fa57c249900>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fa57c249900>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.82s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "343d235985d64ce6b9329bbaaca89423", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f7e45245900>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f7e45245900>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.68s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "fe76bf5e5fe049c9993bc0991ecc7f42", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [20, 38], "end_pos": [20, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f4ba426d990>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f4ba426d990>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.12s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "778a784064024dfa955e4bc1eb826bcd", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [52, 58], "end_pos": [52, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 22.38s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d2f0d4191d6b4b608c33fa1c2c8fa892", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [20, 38], "end_pos": [20, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7ff4ec9917e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7ff4ec9917e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 22.41s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "b17b7c1d5c164ec4a63627d248c6c7f5", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [52, 58], "end_pos": [52, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 21.65s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a3467c0cb532406980f703cc2d128cd6", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [21, 4], "end_pos": [21, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fa5b95a5a20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fa5b95a5a20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.28s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -18,7 +18,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "fae098218d344b2cbaa112ff489cf665", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [54, 4], "end_pos": [54, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fc13ce519f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fc13ce519f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.57s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -51,5 +51,5 @@\n     keys = rasp.SequenceMap(\n         lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n "}]
[{"job_id": "840060299ab548e98ee568b860e7e00f", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [18, 14], "end_pos": [18, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7facf4785990>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7facf4785990>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 23.32s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "fce0708425e04be6ac10845e4a5736b0", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [18, 14], "end_pos": [18, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f750426d9c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f750426d9c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 23.15s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "dede3a88d6074da39efdda2ad703df2b", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [20, 14], "end_pos": [20, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f47d5e4d930>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f47d5e4d930>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 22.28s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "64085e6773c1430ebf2fd02193f2e83e", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [20, 14], "end_pos": [20, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f5506e45a20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f5506e45a20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.39s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "bbad964ecb684c6d889b0afb6733031d", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [21, 11], "end_pos": [21, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f17a097d9c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f17a097d9c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.01s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -18,7 +18,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort("}]
[{"job_id": "38948b73a91645ab9ec92e00b106f515", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [19, 17], "end_pos": [19, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f3ba8969960>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f3ba8969960>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.83s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -16,7 +16,7 @@\n       keys: Keys for sorting.\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n "}]
[{"job_id": "ced08a74ee924453b1f9bb58f8aee4ab", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [21, 11], "end_pos": [21, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f9ab32518a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f9ab32518a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.96s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -18,7 +18,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "d80cd99008194de789c42dc4b4bfabf8", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [51, 11], "end_pos": [53, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fda672658a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fda672658a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 25.54s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -50,6 +50,6 @@\n     \"\"\"\n     keys = rasp.SequenceMap(\n         lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+    ) * -1\n     return make_sort_unique(vals, keys)\n "}]
