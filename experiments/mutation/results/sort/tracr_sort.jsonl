[{"job_id": "025169369cd44a4287dfebe4d96b9c32", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 19.38s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f5ca906550ba4a2187b9c3407bc8d311", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f7e58a51750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f7e58a51750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.36s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8a5e491edca543fabeace0b8d73e533b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fb138f99690>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fb138f99690>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.07s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e232d98b8d48418295168723e0b92b3b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f2f6fc6d780>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f2f6fc6d780>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.94s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0cd3b0631e8a4ac98d69128ebbd980fb", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f7d8e2616c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f7d8e2616c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.20s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "11ac101401f9478dacc7a83406a8417e", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f272a1757b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f272a1757b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.00s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c51c0287bc134516812c0f8f92163d82", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a00bf9ba78034d9d972f9ce0ff846408", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.85s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f7cd3e372fd64679a9eef3cb77f8c31d", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ceee2b416d574d06aa3d26e711baa520", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.04s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ba71797b7a834e5d985765b863960532", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.03s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "356fd82f832346b7ab5fdb74a1fbe14f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "8ee0bb776e9e4247bdde8142de473758", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 20.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "553085752fe74a00ac2887de56468e7e", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "2504a2014c964be79a6f626771e37d73", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 18.70s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c0d2534e6acd4668a508b48a5276aed7", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 20.28s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "3ac7e1b9c34348cfa7f427babfaa1aeb", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.26s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "9768bfbb32434167b56cd5cf1848c83f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "1bd5603c692340e48204644995f680eb", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.91s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c7768336eb9d4fa3aec621e584c73ef4", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "20cd2898103643e9a545452de86fa776", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4ec483768a52460a925096e1c5ea12d1", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.39s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "995f4b53cc344665b133e2c0b4e191ef", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.18\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f4c3b261600>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f4c3b261600>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.74s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "21eba0b34a434f219c37b82cf9a29c68", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "463648961e1545bd800405d667f85946", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.91s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4ef25b830dd54422b9c43c001d6fd2fc", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "942b7b660d6d46eca7451e048816b8e8", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c167745f564145bbb788a3be61e1f91f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "e52ee6ffe36c45a7a30c4b1a3b70d00d", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.87s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0d260033bc3849768c869069a4f0382e", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "d4c5894ebad24927a1e2601b11ae5730", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.94s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0ee9a132b5da4d4a9850492073ae2a46", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n___________ ERROR collecting experiments/mutation/tests/test_sort.py ___________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "0dc7505db3894fc7b83366f0b8b4df08", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2dbbd0aca39d4f1a84774f20e23926b7", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fece7d5d630>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fece7d5d630>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.48s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8388af7cf894432ba7824370a391dcf3", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f6949a51750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f6949a51750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.05s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "30e1ebf8ea1444948a68c1a3ad588200", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f8b4e965750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f8b4e965750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.64s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e3107b87db3a47dd9c014280e3135498", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.18\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fee6fb4d630>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fee6fb4d630>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.78s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ef90cf55428a4f51887f26f896131065", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fa3bec616f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fa3bec616f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.58s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "dc1b85a04dc54914bb554fe985608d28", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f3b60f71540>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f3b60f71540>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.66s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "94d91442057846f5a49f39014434ca0b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f3ca4f69780>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f3ca4f69780>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.08s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b9e3355f6eeb456fb67914bbef818251", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7fccb4255690>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7fccb4255690>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.86s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "130544d8e6e84b13b5d1691eb725622f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f03bb0495a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f03bb0495a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.28s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f9598efa8ae7426db7b4d673035855f1", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f71798696c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f71798696c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 16.54s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e7b5aaffeedf4ef98de2e45445a7ff46", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f66f29995a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f66f29995a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.67s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
