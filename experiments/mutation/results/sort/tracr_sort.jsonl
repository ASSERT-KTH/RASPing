[{"job_id": "2577b379af9642b492f625ca36fe905e", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 43.94s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "5f1e78eb029f49b693b2653592dd7dea", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.148\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7393fcf86420>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7393fcf86420>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.98s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "25fb3c35a14b4e5faacf0abdcc01ee06", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.126\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x72d0d6f12720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x72d0d6f12720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 42.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "facf35e2b7de4061ad7e3f951310518d", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.144\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x732ad3327980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x732ad3327980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 40.10s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "395f891bf1514676a594aae089276fd1", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.018\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7abe97635010>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7abe97635010>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 26.78s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b9a00920fc2a4ef9ad724d66ede17b2f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.12\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7ceb62cb52b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7ceb62cb52b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 31.31s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "009f6a70bc664bb8a55a8d3f55515da2", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 3.12s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f80e9cbc08384500b6cde907ebfe0b35", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.02s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "de5db56480874740a9d2f9d221b1bec3", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.69s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "abd8b6d29e224db38152b830885fc480", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.24s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c369dcd10b9540d093841bf6f4f4ee55", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [52, 23], "end_pos": [52, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.56s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "79769f0e69d344498faef07ae64a8901", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.31s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "aa919988b34b41b18a5d7f96d832869d", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 43.41s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "12aaba33cca74dffbbb50fea5e4f9383", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "f2ab737a38d44d2fbdfee9910265aee3", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 44.71s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0387889a085d47b1aba467936d4c0a75", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.21s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "acf7c840993f4a17b1f04f866c6a485b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.63s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "414aa15c1f254a92ae157a26ddf37c8d", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.34s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "2c7667fa48de4d4985b15067ebc2e11f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.72s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "65909bfb0246414c828a0f085d262f73", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.33s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "53475e76de3c49b1b1205bfe9c2f7726", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssinteger modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.08s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e80ddbbe51e343338e9467138bc3e3d2", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.26s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "6cba0f5e68df49eb8b17266022e41615", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.476\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x79a97d016ea0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x79a97d016ea0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d51ce8fc0bd742dba8f29b73968ab56a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.30s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "3a58ae75acb94a0487683e154d74ed5a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.38s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "320c43146d75435a8c272277079f3661", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.29s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "db99694f02ea4a5b9701dc63d18a1473", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 4.26s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "fbed8ae52fe04db7b7b8cf2778670855", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.37s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "04a8eea00bb241a2a34fcc589b043f70", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.85s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f18f7919c9054056b9abff3b60da823b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.29s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "3eb4dd86f52448f6b96a18c984ab7733", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 3.58s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "fad5e4df982443788064e876ce0e405a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [25, 36], "end_pos": [25, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_sort.py ______________________\n../../.venv/lib/python3.12/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.12/site-packages/_pytest/pathlib.py:582: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1387: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1360: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:935: in _load_unlocked\n    ???\n../../.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_sort.py:13: in <module>\n    from experiments.mutation.source.sort import make_sort\nE     File \"/home/andre/Repos/RASPing/experiments/mutation/source/sort.py\", line 25\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_sort.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -22,7 +22,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "fc3b38569e8248dd8e2e7e7ed43ae92f", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [52, 33], "end_pos": [52, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.97s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f5fe5f9c3b9c45d4b77b96d6334ac78d", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.174\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x70531b745010>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x70531b745010>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 55.64s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b0522f519e1c45949d86be7106f338ff", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.172\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7cd1f4eff9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7cd1f4eff9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 38.28s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8cc6a8bd1f644f1784e2686ee5b2bc80", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.124\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x76104722f980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x76104722f980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 31.91s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "125e8cdb2902412aae315afc74f483b5", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.48\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7ae4f5ab7f80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7ae4f5ab7f80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.72s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b1900d6d8a524c5890e648f98b72eac0", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.224\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7d9dbb13f980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7d9dbb13f980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 33.62s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a3a4b953ec7545de9f584dc0dcbf8d1a", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.176\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7bfe91b0a870>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7bfe91b0a870>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.41s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "cc7fb21e153045edad97547f29d25df9", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7997c1b2e3f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7997c1b2e3f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.76s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c15482c97f1942ca8f6b42eefc1a9b38", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.222\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x755a6d5ef980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x755a6d5ef980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.44s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a3bd54ba480e4055b1f408cf71a99af3", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.118\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7ad194d70ad0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7ad194d70ad0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.98s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "49eaa2b4c76443ed9074d134bd7ecd3b", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.062\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x76996d1021b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x76996d1021b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.86s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "24752ce5fae8439dbc658e1f7aa85563", "mutations": [{"module_path": "source/sort.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [52, 37], "end_pos": [52, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.094\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7dce50f3f980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7dce50f3f980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 35.88s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "9f29b1d0aac04b8eb55653027cea16ae", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.016\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7593bc983980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7593bc983980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 42.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "e2cb34d7c1b244db8dfbe705e5a2cd79", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.024\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7e654c48a5a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7e654c48a5a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 53.69s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "35d7629ad9144a47bab0a346baad81ba", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.028\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7c3450a1b9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7c3450a1b9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 31.92s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "900b1f8b8b2f4e3f825095175461109a", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.018\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x737714763980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x737714763980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 33.01s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "3692700ac5284622b2b8d28f200302e9", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.142\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7b5e9a95f500>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7b5e9a95f500>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 54.36s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "3823849848844805b5831883e445fc1e", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.024\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7ebd02fc79e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7ebd02fc79e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.89s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "7e043b853f5d4ebc85743e860789166b", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 38], "end_pos": [18, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.022\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x75ce58423980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x75ce58423980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.36s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "89ca30cb94cb448589998e23c43c895b", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.034\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x737bc64679e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x737bc64679e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.03s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "316390e38f8849f5b61d6673355ae22e", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.022\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7f51eb600fb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7f51eb600fb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 34.62s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "1bf519edb14d4bbc84cf65b8c0bc558f", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.05\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7446eba8b980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7446eba8b980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.67s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "d794a49f7be74e63808b8fa3a084eb74", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x78903206a390>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x78903206a390>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.14s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "c9e23396f5c64580a31436c877bdafc1", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.28\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x72de4c05b980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x72de4c05b980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.07s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "622940a7e0074060bab3201cf9eb6712", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x75ed50aefb00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x75ed50aefb00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 44.52s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "41ca185492534e2caba527e2e4a26ceb", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [20, 52], "end_pos": [20, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.032\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7459ae91e420>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7459ae91e420>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 38.12s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "c2e994228b3e4406b82380f47b9d0de6", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [20, 38], "end_pos": [20, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.03\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x79bfb622b980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x79bfb622b980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 46.43s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "b82b59775a8a4e538ce48a08569220a3", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [52, 58], "end_pos": [52, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 42.36s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "37590bfee2b84e5690d41ca8642ab4c3", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [20, 38], "end_pos": [20, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.024\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7c5b14d2c8c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7c5b14d2c8c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 35.59s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "6f096126cb574b518e8d8bb24a24056f", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [52, 58], "end_pos": [52, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -49,7 +49,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ab4c7f2b0bc146228a01c389241d52da", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [21, 4], "end_pos": [21, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x70a9f42179e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x70a9f42179e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.93s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -18,7 +18,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "798282c2e88a46e1b61bca5c03a0d955", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [54, 4], "end_pos": [54, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7d5c3c7ab980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7d5c3c7ab980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 37.04s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -51,5 +51,5 @@\n     keys = rasp.SequenceMap(\n         lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n "}]
[{"job_id": "30cee72640514fe292c800b0a097f630", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [18, 14], "end_pos": [18, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x72f4e1583980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x72f4e1583980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 43.77s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "1901d11ce2af4a3fbee4b397e4c9ed78", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [18, 14], "end_pos": [18, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.028\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7e1e3f9879e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7e1e3f9879e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 34.87s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -15,7 +15,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "3ee41bff4f484d22a968f42b37c6e0df", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [20, 14], "end_pos": [20, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.05\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7ff335fd9580>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7ff335fd9580>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.38s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "554328c4889e4e69bb27f6d5ca54a5a2", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [20, 14], "end_pos": [20, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.064\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7cddae295010>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7cddae295010>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 34.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "ea16cfe71f5641a297d294226ae3e9a5", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [21, 11], "end_pos": [21, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7d108db5a720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7d108db5a720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 47.75s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -18,7 +18,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort("}]
[{"job_id": "7eff919207c94961b0cfdb93a0eba2ee", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [19, 17], "end_pos": [19, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.048\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x751373dc67b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x751373dc67b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 40.94s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -16,7 +16,7 @@\n       keys: Keys for sorting.\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n "}]
[{"job_id": "542d038c5eb147218b80edc6532085a2", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [21, 11], "end_pos": [21, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x7217f04effb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x7217f04effb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 35.78s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -18,7 +18,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "02658c42010041699dac5a144dfd423c", "mutations": [{"module_path": "source/sort.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [51, 11], "end_pos": [53, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_sort.py ssAccuracy:  0.016\nF\n\n=================================== FAILURES ===================================\n_____________________________ TestSort.test_model ______________________________\n\nself = <tests.test_sort.TestSort object at 0x6ffd20df6180>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_sort.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_sort.TestSort object at 0x6ffd20df6180>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_sort.py::TestSort::test_model - AssertionError\n======================== 1 failed, 2 skipped in 48.38s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/sort.py\n+++ bsource/sort.py\n@@ -50,6 +50,6 @@\n     \"\"\"\n     keys = rasp.SequenceMap(\n         lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+    ) * -1\n     return make_sort_unique(vals, keys)\n "}]
