[{"job_id": "b1ea4d4f9b1d4f848634183c11a39292", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f06f011b820>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f06f011b820>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 39.00s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "e86f142797eb47f58510e7a927b76ebc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f612c35baf0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f612c35baf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = not 1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 2.73s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "8a920c1641fa499a95f8030534395766", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f566f9fbc10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f566f9fbc10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 46.45s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "4139c392b6de449ea4bec78d2a1c553a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "dfe8099c361e48b682f8c8b3f2bc8243", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcc97ffba00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcc97ffba00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.21s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "81e2f943da8f4cef82757c8d5af3bfe3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd155147cd0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd155147cd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = +1 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.20s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "31819c317bce4ee4804366a393070424", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "c3e63f4c709e447aa90d9c51d8280da6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.45s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "7cf3fea4bf4e44069b8cf4927f7836ae", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.16s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "32a6ab69483144a5b9ad38ed3929ceee", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa48d41fbe0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fa48d41fbe0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.09s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "75d7d1356997414eb9033ebba2671fde", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.70s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "99b1e4d53aae4e5a9a5802887d239eed", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "6965d46f02d84b13a22a3d6087587c3d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "617f1b9adb0b4a79b6ae17d9122b5a76", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "87946f5bd4e04812a9d497bf5c5796ea", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe347bfbbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe347bfbbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 39.56s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -32,8 +32,8 @@\n       keys: Keys for sorting.\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2c9433f8f3464d748748525971e2bb63", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.22s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "9f71301f1d3245fcbf46070a2934fe39", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.59s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "74e214a3b1e44315a6f28259250acb8c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5d43b33a60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5d43b33a60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 33.74s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "5f541719af6e498ea1d79b4ccb7369b5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.50s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i % max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:"}]
[{"job_id": "f5bc511f08c946cdaf380d7235c83c71", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f751e837af0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f751e837af0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 34.74s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key + i / max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:"}]
[{"job_id": "e8713f84e78b47a682abe37a99cf0434", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f914bd37b20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f914bd37b20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.29s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ** make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "6379fa7782414638b455a7b36d006ec9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "74242b44c58e4cbc937ec3ec87af370b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "daba0d72abaf46dc94cdcea47f517eee", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.06\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2718957b20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2718957b20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.11s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "d28b70ad55844a0aa68fa4b08577c692", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.44s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "db4527b995f048e6987c3f256f69dad2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -66,7 +66,7 @@\n     \"\"\"\n     keys = rasp.SequenceMap(\n         lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "750aed9ad3e7466bbecc664b65d0ad7a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -34,11 +34,11 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f13826742f724fdfb8c0763a4794048b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.46s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "88d9deb707964e68b35e280f35a1c4e3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5f8991bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5f8991bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 41.20s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ab5f7467373248ad91847a836967940a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f4c85127b20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f4c85127b20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = - 2 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.21s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "b251f20d22ac4c21a9fbee92d2804fd1", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f97b25dbbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f97b25dbbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.19s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = - 0 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "45d033c8203a413fb264c42c8147699c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa80bbf3a00>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fa80bbf3a00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7fa80bbf2410>\nf = <function make_sort.<locals>.<lambda> at 0x7fa80bbc4af0>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.41s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "91f9474933d24e3f9430eed9e11ab41f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.15s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "07e55aafb56349eb91e90ddccb512901", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f3752498f87f4a88b809c5cc6a1660b9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f73932226f424f679be32d0f48a1fad4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fca43de3af0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fca43de3af0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.45s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "6cb9416426394e14aafc3072d66fab2d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.27s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b1ba647e345c4407814a348047944154", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "1a4cb2e6d00b4ce4ac334beac50efd3f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f18e374f970>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f18e374f970>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.33s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 % make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "4ceea91366b0476b80d942676a9a4e27", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe871b4bac0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fe871b4bac0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.25s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 ** make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "ecc589d3e21b41e790e985de59bedfa1", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5e87313bb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5e87313bb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.72s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i | max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c021559b795e4ae189d48b84e2a5f46c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -34,11 +34,11 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4d31108f47a94a078e1eb7ed615b1af4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5d48bf3b80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5d48bf3b80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 31.64s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices - 1, rasp.Comparison.EQ)\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "8cce4864df774efd9757013aeb42744c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f49c543faf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f49c543faf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 43.27s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -32,8 +32,8 @@\n       keys: Keys for sorting.\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0093463955634ef986277e8de1254fbb", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "d0bda58ef3ce491cbc4e832a84fcf6c8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f54fa4efa30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f54fa4efa30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 35.67s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "c8fe1aff9c424d03915576b93a52c50a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7faf77f5fc10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7faf77f5fc10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.31s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e63dbf0a3e4b42989c99336e89bc777d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa5e632ba60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa5e632ba60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 36.02s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "c52d53e44c694e29aa4006be41c84d1d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = - 2 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "2bf8a0b423524072ad71a3253e5e360c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "29c99bc9550743ffbb4c1032ef6b4791", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4d13cf86d0b14ed3be6e6291925845bd", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f3b5e5f3b20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f3b5e5f3b20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.95s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "e60b9727f9034c42b6cf88e3297486b3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.44s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "30cde75f0ea94d25a0f22720435a5f29", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "ec7a340a6ffb4a0da4d5c349eb82c37f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f401dc3fb20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f401dc3fb20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7f401dc3e530>\nf = <function make_sort.<locals>.<lambda> at 0x7f401dc14a60>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.51s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "05ed01c2a01e4e6fa7dce02f990bba4f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.16s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "73e537d661c34b5794423ba325d6aa45", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff6b442fbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff6b442fbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.14s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f03ba5591d4b4631883d107434031a5f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "c024dd85ad154aa7ab8720a704daa561", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "471b8f72e55e47129b1f671acda9f0e8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.18s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4e1c3dba8e9c47beaeafa9012aee31e5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8302e2ba60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8302e2ba60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.65s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "26ccfb99ead94a048fd385e2c370b55f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "dbf0342fd89c43c38d41a7a13411775f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdf0f11ba90>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fdf0f11ba90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = 1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.25s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "40534fbbadf74aafb92a2f3430b2133e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5e727ffc70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5e727ffc70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.47s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2dc75ef831f24949b3a61e971bb9f3c4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f426162bb20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f426162bb20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.30s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "c969e226057a4cb8b09d5f60225dcab2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "aea348883d18449f93e580e1fe83c887", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "becb29612607411d8467cc0cfed23a55", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f86b9d33a00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f86b9d33a00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 46.30s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "d5609fe4cd634dd19570eab9ca4cb7cc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f93ec52573da450caeb027b269bdd422", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcd9032fb80>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fcd9032fb80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7fcd9032e530>\nf = <function make_sort.<locals>.<lambda> at 0x7fcd904fca60>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.43s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "6337567b7b8f40eba43f2f8b99cbe3c9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "68e076290d844a10bafcb8a1a9844c22", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f83dd7ebbb0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f83dd7ebbb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = ~1 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 2.56s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "b76ef410a8534278beda1b7069dd87d0", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8f06a3fc40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8f06a3fc40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.66s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key << i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "37e49f1078024c3cac3af8afaaadb0ce", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "25ded542d0b14583aa60571a2c20bca5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.17s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "e7e016d152d045ac9564f6e0f3dd14a1", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6657d1bb20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f6657d1bb20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.56s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "3ed266af939646bfb57b71c009caeeb8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd25881fb20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd25881fb20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.39s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "31d0cc702c0d4af896aedda554a40a37", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6845b4b910>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f6845b4b910>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.22s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "a9d1a685f84a42fca816bed1d450f457", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "8de5be29065b415ea70f33c7f0f58761", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f217e62fa60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f217e62fa60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.33s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "eacd6d2739ca48aca89a5693c2cb34ac", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "beb915a9319b420c8ae7e346383852bb", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.45s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "48259c9b1f7b460caf76ce4848532c90", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "17599e5eb43c49b6a366f548f7984c6d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "fcdd4c809c9c4f7692dbe4e0ad329e0b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a478f084a7d041e0a77f60e4967e3804", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2480a2bb80>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f2480a2bb80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.31s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "00e3ff5c521d4006a6d6a3020408a153", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.19s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2d94b57992544f0491bdd1f14c1c77f5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "f83e94bc13e943e6ad8d33d3876debea", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "0146f40975714bdb88b8207813450c84", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ffa9c01fbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ffa9c01fbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.26s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "f0b24b4dc17443df8b64d7da682580ff", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff0673ffbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff0673ffbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 19.30s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = - 0 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "ac2a0bee3afd4dadbc921a0a105dfe94", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f31a1e0baf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f31a1e0baf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.17s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 | make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "a65ed114aaa6415a9b8444f5e44f378c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8b9d0f7865024f44b3f8f7858c50f4d2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "d4d06799081041e8b602576dc7d60297", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "c260da33b97441159b7f541024225f5d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "96bdbe73107a4c0f90bc8b9223f5f323", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd49a55bb20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd49a55bb20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.25s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "163b667179714f5a9617acbe6c72588c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8022f8a9559c474ca43044ea9fe2565e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.50s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "36c6f5dd6fcf4844b496d868332a693a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ^ make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2cb48d4e365b48f99647c3cfd9d86bff", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa9ceb1fb20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa9ceb1fb20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 41.14s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3bd92bf1fc3a414aa54cd01f24430623", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "98dca8dad8b14fe692fbf425a5490c5e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "5c8e3dbfe6834692aea9744e3417b151", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "7af8ad1d070841e6838ec3b129d7ca34", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd32623fbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd32623fbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 38.30s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "fe6ca84d3e004543952c626971271d37", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f83e4803a60>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f83e4803a60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7f83e4802560>\nf = <function make_sort.<locals>.<lambda> at 0x7f83e49d8a60>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.45s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "ee3f6d30ebaf4c0286da55318cf79ffd", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "69d12eb9964c4aed824dc862b2060235", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "eb1e9a32a3be4dfc9bde0e47219dc9cc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe615b3fa60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe615b3fa60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 41.36s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "929755f814774096b47179673ff347d3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7c365ffc10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7c365ffc10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.34s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "2ed017941c634ddebf8d5f034093f57f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "478a002d22714d9498e08e7ea28797cc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1fd1953c10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1fd1953c10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.99s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "e34def1c029a441993b5c0ac10922e5e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "e612e452d1114f519ad55457622b38bf", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "bb1fd2da10ed4b33a9e9c30d68ebf0a3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b2fa535d4d484185b5ca439158951cb1", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.14s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4c0bd10e75c145e2abfad1398cbc7ff6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "b1194822c32d41eb9bc6dd2144ac064b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f13e130fb20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f13e130fb20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'Map'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ** make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5332a38b55ed4657b5f8709794aa0e6b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.54s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e196794a50304297a28de22c329288fc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "e0bd11f78c2249bea10acfce73d318b3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff71b833b20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff71b833b20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.09s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4a922234b1504c048d5fef788f1011ff", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa71f003be0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fa71f003be0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.22s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "43979a42cb9849d09ad443d5c099bc52", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "c104cb5c5ccf45aeb1a7b9f9589cd8ef", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.43s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c570d522a14d43b1a325876a6c94c896", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f4d46317a30>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f4d46317a30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'Map'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 2.72s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "03a8070e8ae749b8819ce46343f097d5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "55d60d72151f4d95aecf8b2634eef3ab", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f7ed21d321a143249c2f1d8e4687ceb8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd698f2bca0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd698f2bca0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 40.71s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "f1715ffd70944ea49715c9e288ba9280", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "096c3953e99f44ffb3a562074e5aa005", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0d3c32b8e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0d3c32b8e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 19.85s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2291c633f7a74a418b369331f3464a33", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "0677ef6cabd14f5aa5962e4cfc2e208f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.51s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "5db83061d7d64a79a41048baf0255c5a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "1b4ac0ad370747cfb69c8ad4c30012a2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "3f61aa5cbe4b44df89cc303a9a8a4a2a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fab8b82fb20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fab8b82fb20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.91s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "0b67d15ea78e42e68bac569bd5893e44", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f79bbc33be0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f79bbc33be0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.34s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "0e735a71012c4f2c81d3dc4fdb285c19", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -34,11 +34,11 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "0036e3e3bfc04cc5a27106c37f5eef42", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.42s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "35f7d6cc9f564c609bc1a0d63c9aa145", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.34s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8e5d053422c744ad958b07163d921104", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb961a3fc40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb961a3fc40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.95s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "bf8f54d2e36a4bbfaee66d46d610174f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.46s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "0bf17af81e454c5f96c55bbf704b4fbc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9393013b80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9393013b80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.45s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "10dfe52307874a04b7a1e15be5649a8c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "9ba31f12c1e04f6b9b43f43ce12b899a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0b1ec9e1e20b488dbd2257bf54a0ceeb", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.46s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "abd0bf734cf1493bb9e3063084bbe7a0", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.68s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "6c123715910b4938966ab017de4f66d9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5723233af0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5723233af0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.68s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "7353adca57724bcfa66f55071fd92947", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff01481baf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff01481baf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 24.69s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "ab1932789b714da699127b7382c870a9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f46447ebc10>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f46447ebc10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.40s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 // make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "f28bf27571834db184867c446bec4307", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0cd9fe3c40>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f0cd9fe3c40>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 2.87s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "357765f4f7cd4e1b811fc2c88b6e35ad", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "cfd18cbc42ff414083633c7e2e9770c9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5faf5ffc40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5faf5ffc40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.57s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 - make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "dbb3d88c94d441179a9b6f343ba632a4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.42s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,8 +31,8 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "dd50d3b4f5c24621a6f20439e5124898", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "65281d45ac4c4432baff58953e49fbe7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.26s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5257c6128ac94a0889b2e194d90d1e28", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f047ce1fa60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f047ce1fa60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 45.33s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "78bfb8d02b22404da23d1b64de26e6b9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efc9533fc70>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7efc9533fc70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = - 2 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.37s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,8 +31,8 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 ** make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "4016e82c5c2043f2ac1ec0843dc6aa8d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9319757ac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9319757ac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.10s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "b98cbb59dcc449f08cfab9a74f96e955", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.45s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key % i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "00228597a6314d8ba8b7ef317729562e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7e4f14faf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7e4f14faf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 49.94s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "4a5a5718640546b59405b56bfffddc52", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "1bd34ead383a4282a0beb6fac2bfc790", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff593d5bbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff593d5bbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.33s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key + i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "10b2cc20ea4a4ccd9ea4942d5da4881e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.52s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i - max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "07bd33b1d4b3468aa05ec5e67ab0c3de", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f624e92bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f624e92bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 38.43s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "699440c906e44c83b8c999e4c549fb8b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0415b5e923be43fbbf5cb19f5a6eb435", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'float' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.58s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key | i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "9670e499d9b5423381940f1503bb2f51", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f961551ba30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f961551ba30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 38.53s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3376e6f734924260b71db0ba7c0667a9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.85s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "33751fd7729442318640a6f52e12692e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efedf01fac0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7efedf01fac0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = - 2 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "1e0456e267bc46b69fe4d696dffb06c2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "95df2710f87f40559decaf6a69323c1d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.54s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "76de67ab40ae48ae942ae9b0adc8ecc9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.34s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "bc116e7cf19447dd9c22fcd75aaeb92c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "8d66b8ea64224355b9d1df0887962822", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff72532fb80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff72532fb80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.28s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i >> max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "51537303a4e24232a44c73dcaac3e773", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.06\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7a9163fbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7a9163fbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.66s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key / i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "95a2e69335f2404aa2ba3793369a3ad5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "93a4032acaf4402a8fabee940a9e47ac", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.37s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b7aebd1ede1b4a94b8ab59e83e2c6d42", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f440981fac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f440981fac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.26s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key - i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e8b532a71d95458b9c43968a070a5da3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "bdac5f5449654bc785b4c9c956b37c8c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.48s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f86a464a6f7143ad8728426e6d63082b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f78b2fefa90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f78b2fefa90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 46.10s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "81b49cc059c441e88d9b2a13a3ddf603", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "000e8d6556c94095ade33a2d1014a0f7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "5d3b4aa65ac044b5b14f78e6bc936e18", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff6bef27b80>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7ff6bef27b80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.58s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "462aa5ab9d8b4d52b6dc16cf9722129f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.12s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "9e5c208b0c9849998926ad30bd1916b6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fc87fa1fb20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fc87fa1fb20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = +1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.36s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -32,7 +32,7 @@\n       keys: Keys for sorting.\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5c8d03f614c64c02b99b601d779d4861", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.26s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = + 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "31e565f7fc014affa20ff20789cb7bfa", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.66s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5b2cd3167b3c43d1abea7fa3a42acdc9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = - 2 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "c7b2d31f5ddd461eb572d7e64efdea39", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa62c42ba60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa62c42ba60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 50.99s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "8ac084b90ab8437f8b7cb13a2a29c761", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "27722ade5c044ff5b97e3b18b584ed18", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f504255bb80>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f504255bb80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7f504255a500>\nf = <function make_sort.<locals>.<lambda> at 0x7f504252ca60>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.58s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1 * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = not 1 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "474ba28ee182443082e25eeec97d66c8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f80dcc3fa60>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f80dcc3fa60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'Map'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.43s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "26cf95b9692f4031b71b241d22b98a8a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f133381bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f133381bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.07s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "71d145c928014931b257fbef6120a9e4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9404f27be0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9404f27be0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.33s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = - 2 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "e819a27979204d3186d16051f157300a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.43s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "e88f44fb80a74cad88cb686c2848e3fe", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0f5275af7f2b47c49f86dbaa9ee5b6e3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0cc15435a9e84fd0bdc84043533f5dae", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "a340e9b06ccd45d39babb4785a2cb0fa", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
