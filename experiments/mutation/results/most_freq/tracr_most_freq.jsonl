[{"job_id": "36055234cd7d44c59206fe3a715dc9fa", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f7ef6d3868b342e2a54cb74038f99e77", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "409bed16f5454febac1ee96a3aac965d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "6a8b957322b84dc08827a7b5f67aa9f4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "467cd5101a1b441c9a2fc12543d066aa", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d568f224ecdb4302a86829944fa6484b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "818c537daefd4be1b9cfcba83c1406f5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.98s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "cadce73ca04f4c67871dd7961632389f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.82s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "00210fdc09c84f18b75ee94f6fe04ed6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.84s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a39f54d704474608966b03c4d4dd001e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.91s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "05e3a0be5ed144148be9f35ed9401b94", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.86s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4586a08d85d04b578e6202d865ccbd34", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "e7165a14ec97425688def716e00639fd", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "35ea04676c3247209edcb40c7b4d663d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "a989efd1291041d88f986f9baedbbcd7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.29s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "fa834146e4da4fe2aa6c8b3a83235901", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "adb39897c7dd4fb58fbb4247b428a86a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "26ff90da7c6d423d90f4cc86b7f0aee8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "2910c77f16d64f578b403bdefcb5d588", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.03s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0432bd805eb44d9d9a10348f856e0fa6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.93s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "0308fbfc8b6b491a9d487f9ae12a9993", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "61003e3969ab4573b7f5b412d12ad173", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.91s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ff2d08a64f274c6dad4607f2bd3b999c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f16f754d7e0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f16f754d7e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.84s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "cff9a8fe7a054670865999f159accb9d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "b65dc0b8670641faa38fb1cefc4d7111", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2fd899dfb61c44e1975ea3ac98b4286d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f4ade86d7b0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f4ade86d7b0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 2.01s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "92bf1a7c4eae4c8499b6429c8d014974", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "d4a49d42a24c418aa235195a40838c96", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "be62ca621f3343b591b2695c094c25e6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f77efb59750>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f77efb59750>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 2.18s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ** make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "34a4787bdade4349adfef2ff1992751e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.29s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "59c9bd9f9df0447caf51c7649442cf90", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.93s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a92da76d5f2d4a78b5ffc643c458ee0b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f974d3816c0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f974d3816c0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 2.01s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2600c2eefc1a4643a6320bb2cd4012a5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.29s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "300ccaadc264482aaea91bd42a1901fc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.04s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "96aa33f9df3e4799a401628c29d0a70e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f31db7817e0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f31db7817e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.92s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "facc2d5b306a481e916e8570e788e6b7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.27s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "9a3e47440c5742ff8fb5235ef7a858eb", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "7d40effbacd141f9861723ac45876b9b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "222cac2dc01744c2a01eb48dc550882c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.28s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "5f5ca02d624c43849846b99b5ba9c780", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.87s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2b20125f6d674d0caab8438c36159f9d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "fe575dc2a097415f9616997268bebbb0", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "840ded6054ba49ab8fe2cae3db2914c2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.96s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3df230998da54c688508aae165a3230b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 2, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f4efed657e0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f4efed657e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ^ make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ^: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 2.17s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ^ make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "ba3849ff500f4e4b9bde3d1511a6c152", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "77b461f3162a45a096ca7e9c2632e0a5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "09d4f7c6fa8243e9865ac4869e95a235", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "df1a8c2295bd4e959706d8c11f1847dc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3a7c12fec36c4ac8ab4e60dbdeb732d2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "07cf305830e4435f8959228a780ba0be", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b9f7876c4eb649a69e7bb3983be82ac2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3c8d8fbd616f4bb8a1361fc04874cbc3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0ac9d2b91fd542efadf8a3a59cf4e4a4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "7a7db948a8644227977a05c9a7f3fba7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "93c5ff6960ed406daa05745981f47d81", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "02797c4bcd3446a19e21ed48771db0c1", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2b3c0fe1859b4c69ac2d3b78872e9a09", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "90a15ea56ef2436fbe6f3ac741159e4c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8957a41810>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f8957a41810>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7f8957a42650>\nf = <function make_sort.<locals>.<lambda> at 0x7f8957a50550>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.93s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "185df4486dd745ea935c5190ef2164ae", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "44b9634422f64b4b9c8fb788f9bd09c5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "97b8f30acab94c29be6a6eaf2b956b8a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "9d79d1afdccb48f8a4aa3c2dad2be9b3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "79cc785eb2424d83800ca6ffe9f43597", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
