[{"job_id": "b2db23ea28b5408890ac80b0f4f9385f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.18\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f56db785720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f56db785720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 35.52s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "5644c7bd76904d02837d39dd2a2a061e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f85aef757e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f85aef757e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.41s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a5811c226b35458c955418697eb25890", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9c54a516f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f9c54a516f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.95s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "50e9e54143d448f29ef90745f1cf86f7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcf8c781720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcf8c781720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.69s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "1c12eb3ba3004f5a861e12630a60b6a8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f32cc97d6c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f32cc97d6c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.12s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a174973f9948426da05771d993816487", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1566f7d510>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1566f7d510>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.18s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e098cd523acd480e81fcf91ef112ff1c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.94s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a95d8bf1083e488ba0fe29800314323e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2083494da59b4682a5384fb7888f38d8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e4a0bb883a0e43a7a123e080811b1741", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d76267d6a2d5475798d80833ad022070", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0cdf8780b03a4331a0e2b7a8e2c1a0fc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 33.20s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "487d635848a74df88a5a7ca02efc39df", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb627455780>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb627455780>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 33.29s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "03a0ef656c0e420c919d416fba860f0c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.18\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa42de596c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa42de596c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 33.98s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2092e44e7627417891dc8a8c2882eb31", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 33.80s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5bb43798a2cf428991306030a80c0c5c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "64934e5717ac4936ba6e5e2fc9963a5d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.02s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "ed5fd320fb8747a9bca6a000cd942a2b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "78daed87a5a54bc38fe7d1ad9a94718f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6011779720>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f6011779720>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "46e685d0a7374ec286aa20677d6c469e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "9b9d2a97f61247b197d9bcd65483ba01", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f77811857e0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f77811857e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "24bbfc502b31441e9f7b3fdb6a465ec1", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f644838d630>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f644838d630>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.45s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "9162989cae214860b6386c681961994b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f75c23656c0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f75c23656c0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ** make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "c9fb1fe918684f509b516ebaf15207e9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.86s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "5d53f5b8d8de48b99ba2d04980b4e7ca", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd4ff985690>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd4ff985690>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "764cdb48c9cf4585acd146620c6500d2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d7b23dbfe8c54a8da9562dc60af6c59e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd6cee756f0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd6cee756f0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "e60ce08c0bf540b58491cc5aae9f7604", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.88s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4eba9b2631c64cdf9b88cb18e91ca532", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f84089995a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f84089995a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 34.50s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "358917f5093d49438eab83df946ad341", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "1c62721cf1e541a28bd19170c14c1c95", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe040291750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe040291750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.91s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "82d7f1af2542452b98db68c0ed7bc420", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.89s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8583bc3ee27f4fc49a575dd6a9494113", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd90dd5d780>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd90dd5d780>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ^ make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ^: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n========================= 2 skipped, 1 error in 1.98s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ^ make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "00075af27cee462bbde49ddd4923e1b3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "66888dcad9c345c68ed60330d321d293", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f04e48755d0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f04e48755d0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.45s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0d1969ee50f34be9ba5d4af44dce9174", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "3033c4d9754c446484e8ee409bfc7508", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd258f496f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd258f496f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.44s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4c0425a857f8455c9d9cf080a1ffc04d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 36.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "7cf7f653f1c641799735ff1e1f51e6e0", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f959c6417b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f959c6417b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 31.01s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "7ac6de6c11584220850b307d71e251a3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "1f1b0c55ffb14cfba6417959773c8921", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f325fc3d750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f325fc3d750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.63s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d513906df28a44e3a286890dc12edf10", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "6b6f8946fd004c1abb42f56fe3c7b41a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f794b2656f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f794b2656f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.54s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ae61c686fc0b4ab0999d771f7775b5db", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "7a4a132b26d5423ba1cea853eafac8db", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f3a00c61690>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f3a00c61690>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 34.96s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ae87fef4c1c94fee84983031df3df683", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "4aa675dc964148d69feae07c4b40cba9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdeb5759750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdeb5759750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 18.37s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d1e814ae1ed24babadb6e6e8146adf3a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "2594257ea684440c9d018f4d8741917a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f57ac45d810>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f57ac45d810>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 22.50s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d0818acd4c044238a5d855eaba82ed7f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "5186e1ba942d41cfa8193454fb3974d5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efeb66517b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efeb66517b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 19.35s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0ad2e953a35f4e86b1ca65e0741f6b3d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "c07430331fbd48e89806497f9d0d495f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f778c665810>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f778c665810>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 21.32s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "445de81b47494c26ba562ebbd327f5d6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "8a7c83c7b8784c80ab7f72242f3fbbfe", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe0f166d750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe0f166d750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.54s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "97b5708475f54b97a6500b01bd5df3b7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff7a4e596f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff7a4e596f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.18s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "bf240eadf9ee46da9e8f2f54e85227a0", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.95s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "9ceb948235b94765bb2350ffc07dee26", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd92e03d750>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd92e03d750>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7fd92e03e200>\nf = <function make_sort.<locals>.<lambda> at 0x7fd9e64db640>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n========================= 2 skipped, 1 error in 2.01s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "8c6290a7ae7b4c0ab6f07a4cc617935d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1236c556c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1236c556c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.70s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "9c8cca80c25c47a6b66ea08f41367098", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.47s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2f99fb4f5e4843d2947756ea991aeb7e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fefbb979660>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fefbb979660>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 17.78s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "21c6414cf18646fbbd7eeb9cfcc1a6cb", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.74\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f76e9e6d720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f76e9e6d720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 26.85s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "b6cac5fd301e4ddd9ee416cd25d94f99", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb48fa45780>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb48fa45780>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n======================== 1 failed, 2 skipped in 20.09s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
