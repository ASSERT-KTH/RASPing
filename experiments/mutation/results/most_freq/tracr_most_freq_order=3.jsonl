[{"job_id": "2d89502eac3b493da183f8f1053fa91d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f05b11ffa60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f05b11ffa60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.73s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "33e5618d5d124086b3aa19540af6cd10", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7f6a627c10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7f6a627c10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.54s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2eae42b0babb420fbcbfb96672ddc00f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.45s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "dfe9cac168a14a49b07981db293d89ef", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'float' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.87s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "148ec72ac12b4931adbbf94ff87f9ed6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f3dad54bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f3dad54bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.86s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "c6f0deffd34c4b2897cb36d0562274b6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f96b7cfbbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f96b7cfbbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.56s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "0a9a8eabb02b40ee885d8374e1eb755c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f611cbe3ac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f611cbe3ac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.81s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ae11f20bfa544672baaf91f2d5bf0d74", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "aae326c1f4a54ce0bce652efd1ae039a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "42347e2df3394899b395edf60211d78a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.43s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f40a2698662f416fbf6e7b39d6ce866a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "82ee72ab26eb48a8b39cb828f6b0158a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa6d3f4fa00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa6d3f4fa00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.20s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "54c5677ad1264b348bf07776adfb91f5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd95b017bb0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd95b017bb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.21s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 >> make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "53d3210910364ddba3e2c7441f958c67", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdd86c23b80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdd86c23b80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.25s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "30ff6b77503f43d5bcccb3d3fe041f7b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.88s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "2265f542fd3d4bc99d8d51a3a5d29686", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "3ee501b925b84758a9b182ce9e299117", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f48d4527c10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f48d4527c10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 56.52s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")"}]
[{"job_id": "5fa16708522b4b938dd280e896ea0b56", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "fca2e2cc7f7d4b519569dc3ff59b0912", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.21s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "17b77c6d9d584e91a8942807b6575f90", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efb4c943b20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efb4c943b20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 41.26s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "07d5820e47524f54901f0a4a0e321d97", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "0741a29580a345a3aac8b8cfc502548f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f44db15b970>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f44db15b970>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.11s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a4866ac9d94e4686b900d5a064ee9476", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ff4f5b704df54f218cf408af936692f7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.26s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "45a863d9339d40cfb59cd01b199d3c25", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f014ea1f910>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f014ea1f910>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'Map'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.27s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "3a5ada66387e45c7ac2c9ed85a23ee74", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fce24befbe0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fce24befbe0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = - 0 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.32s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "e36a1eef593e4ae6831fe7077784b6f9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6929757bb0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f6929757bb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.46s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "4a762e825dee4beebfd2d3c342110a1a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efd58defaf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efd58defaf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 36.79s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "7fad71afdb6f47c8b74d93e99d0be0e5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b085da7875b24b5a9751606a0c84001c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb2aed4fac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb2aed4fac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 38.65s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "fbab504711d743048ce254fe716ad966", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.54s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "f374194b60f045539fd9fa7720ed855b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.23s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "341917a60d2246ac99a204115b77ad53", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb7f9f47bb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb7f9f47bb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 42.73s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:"}]
[{"job_id": "8ca5e675f7fe4f5aaecb919679e49a49", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f89ff727b20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f89ff727b20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.09s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "fd25d6b3e5e8449cbae137189d416dfb", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1dd15ebbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1dd15ebbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.80s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = ~1 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "1f428be2b2194c508699eabcb5d09e7c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "aa5640622af44ef99ddf89a1402cc1c7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.70s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "33de1979bde2459fab3044f37812df45", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7ce5b1fac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7ce5b1fac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.88s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices + 1, rasp.Comparison.EQ)\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "965f47af4db748ea94052f9fe69a482e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "64d342b508874eea81418639612a155b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0b4cb33a30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0b4cb33a30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.70s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f78274babb604072b0f55a944abee089", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.55s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "14174f9bc3304054b0ea09ec383ce200", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.49s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b813b49ea85d4d61a73e85151e6983db", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f892fb0bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f892fb0bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.94s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "72398e6aa3894075a2d449319c04ed46", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f11e8e3fbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f11e8e3fbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 40.07s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "32bed6f294c643c0acef2d2ffe9878d1", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb31a41f9a0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fb31a41f9a0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7fb31a41e560>\nf = <function make_sort.<locals>.<lambda> at 0x7fb31a5f0a60>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.47s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = not 1 * make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "896bb1378b154f37b048fc509a04a6e8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "d1d4e1037ee64ddc847de2a8042cff19", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fe675147ac0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fe675147ac0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = not 1 ^ make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ^: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.22s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 ^ make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "3442f65a1e5948169dac61bb3bc28e2d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "71a4a78a5f2d4fdaa0a52aa4a359ed00", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb48923f910>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb48923f910>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.00s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "e8a0217b9c8e41b4850843999a843ae9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.28s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c0c4144b239d468f8f2693728e0e613f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fae6b937c10>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fae6b937c10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 2.93s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "48501432ddd2425e8f74f69d34a37b0b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.52s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "e8da0a78294243338c72c4649f6c6476", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f08dcf4fac0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f08dcf4fac0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.32s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5da22b2848b74b24aa7a2b81b4c57c2f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd206fe3be0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fd206fe3be0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.43s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "3d9a19bb684449e39e8cb169be911589", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd123f47ac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd123f47ac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 35.26s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c461604ff5c948898c464ddff9c6e0dd", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "6f70aab7c7ed413e92d5d3048fb856b3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.14s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:"}]
[{"job_id": "8d76802a7ebc46fda0cf39d2263f0308", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.41s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "6acc48e62eb149deb9174c0243eb1a93", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.74s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d33ad6758df7452d913cae69f8ecca8d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.28s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ca97756416d3485f92f1ed2bcf915b28", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fda509e3b80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fda509e3b80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 30.86s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x / min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8431d1769a694433b644e5e6781d7214", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "9b90b36d99854c2991d1ec9af647df76", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "a684a59fb7d946e2bb877a8aa3396725", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "b3031a42ef17412dafb83e15548eea02", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "f535014c9db642119aac286313163e3a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "aaefcfad8b8240c1b074ba5f729dcde0", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.74\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd307c0b8e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd307c0b8e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 28.97s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 | make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "3350e82064474638ad363baaea2b1606", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f387ef47b20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f387ef47b20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.74s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b18bdaa97cee426fa5e64d225894b380", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for ^: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.56s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c0b0d641c95243ba9e38eabf0cb7be6b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.55s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key // i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c367204573ed4924b1bc00ee98c0b5fa", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -66,7 +66,7 @@\n     \"\"\"\n     keys = rasp.SequenceMap(\n         lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "96a750efed794934a8cf6bbf6c7584d0", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5542143c40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5542143c40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 38.76s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i * max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "81126ff30ac54bc289f87b4168287d09", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.45s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "19e03bdf1ece43c08f555e382c1bbbb4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.48s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a0133d69d45047498171fd7bbb8feee4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f241cdfbbb0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f241cdfbbb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7f241cdfa500>\nf = <function make_sort.<locals>.<lambda> at 0x7f241cdc8a60>, fst = False\nsnd = indices\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.59s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "130ece76183849d1a6b52ff8fed980b6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "cce7d6682a844e78854051be975747f9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8db154ba90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8db154ba90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.96s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i >> max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c0f7288102d345f5830c991239696143", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.69s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "ca24f8061f304e88acfbb86fb587138b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.02s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "db0f3014c4e740088c9218947ab1fe87", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "4f089fb51cf9404db82084e7ccb688ce", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.28s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, +, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "0d83bee910854e3b865d59463fa4627a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd0a1e33af0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd0a1e33af0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 45.38s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "cdd07a09f8184f79be1135d4eb2ff8ac", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.38s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "9fb6211d686640ee9fee0dcfa42d77d6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2c28e37be0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2c28e37be0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 24.57s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "0b19498162e84b65a9cd850bcde576c9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8f9b21fbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8f9b21fbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.09s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c28550588a6a4d99ba63f0868cd947e8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fa0d710fa00>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fa0d710fa00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.50s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ** make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "0cca1224991347f49b02017024a87aec", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "a77cb08187dc47658f88705249af0127", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1e3b71fa00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1e3b71fa00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.73s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = + 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "57962fb07acf4281be10123169c574ac", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 40.43s ===================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1 * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "46b01698c44b4473bf433a58ccb656d9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd9fd617b20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd9fd617b20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 24.68s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "ed95a8f247114c6085944ae4cf3e55e8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7f53f1bbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7f53f1bbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 43.53s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "e55c8c0188994247b5c2701252579bc9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.38s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c25dd062e3e649708316e11df933de09", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdfa6013b80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdfa6013b80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.30s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a62d56e912104e16a862b8b1fc55a399", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "ebd528fcac9c48f0a428cdf404858ec2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.14s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "6f6b48a25de54e47a0066f94882c1422", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.92s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key | i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "bf934aae807349aabe371f4d6acde0ad", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fc455637880>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fc455637880>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 32.63s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "5dac3d4570ae4df283a18484398f7c17", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "595b0fd83ca246d6ad15e73b70eb91fc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.59s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "1fdd1f8eceac46e595d10197647c56fc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "9f0490762ce54f559e871cb02b77fcf5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [67, 11], "end_pos": [69, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.50s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,8 +65,8 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n-    )\n+        lambda x, i: x + min_key // i + max_seq_len, keys, rasp.indices\n+    ) * -1\n     return make_sort_unique(vals, keys)\n \n "}]
[{"job_id": "8d1a84daa0f44d7eaaa9e965232aa25a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f148a12bc10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f148a12bc10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.46s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "fc954ed35e7b4dd8a24ef14a4cc61cde", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f14151ffb20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f14151ffb20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = - 0 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 2.69s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "cee8ef38c6cd42a29fbd8903a4179438", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f4355243a30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f4355243a30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 36.95s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "47e8de8946274c1185dafb047d82e682", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5fbba3bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5fbba3bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 40.14s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "541bdfb728d24390b10d044abe39f969", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Div", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fc5d682bbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fc5d682bbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 28.35s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a055c775e8e2433d9b828811e27fef36", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "7c8feccc7b1b425a93876e3a6cc57c65", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,11 +34,11 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "833d0ae5f83e43eabd628b7bc846b632", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.17s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "7da7cc1630914f48bb476010e3c4cf1f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.EQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "0e7539597e054360a70ebd3088e7daaf", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f04e5bffac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f04e5bffac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.69s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "96a6d644828f410c99edef635448c129", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb4451fbb80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb4451fbb80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 40.11s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "a8226a9ddc9d4cceba24172b9688ec2f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f990f5ffc10>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f990f5ffc10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.20s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "a3ec1cecaa8f4ce48fcbc67c9d4fe911", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2c7d95bac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2c7d95bac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 39.34s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "526b0e079b7b4a3ab99c77af65f3dc92", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.TRUE).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "f0774746f6014b1a90a75bb83f93471b", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "144a0409ab414bffb163a424fcd9a4ca", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.13s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~ 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "7a1e6d8e5f4a4d54b5832f0e6afbdb79", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "969bd2dba5214db1ae6f8d8907b5bb33", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efdf8047a60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efdf8047a60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.35s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "afef293f9a414d6f882163b754687f4f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,12 +33,12 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "db681645f35340a081c91f9b259872ef", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_RShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for >>: 'float' and 'int'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.80s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x >> min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "e3eccc81a03b4306be15a8bd2f737123", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f4d3451bb80>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f4d3451bb80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 << make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for <<: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 << make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "194ba9e38ace4efebc197ed02b215d30", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fadc813bb80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fadc813bb80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.57s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "cf8c02c7e9a749d2934ce7909e034bfa", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_LShift", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.27s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x << min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "bc930dd4162b4570975ca0c31fa32dcd", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "6b0617ff1b60423cb885e2d76b2f5b37", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.20s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "34774d399b334cc7a2346fe26ce27ed5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efc5be3ba60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efc5be3ba60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 19.90s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = - 0 & make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "4b7bbd2aa02243a2a0f2c45e22a4d04c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, |, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5dc933f538404b98a1b35059815758a3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, -, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "8e43addb5b1f4f93b2544cd7f42c3433", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mod", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f62ee83fc10>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f62ee83fc10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ** make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x % min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,8 +84,8 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    hist = -1 ** make_hist().named(\"hist\")\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "94da3068c32b4149bd6a0cb37161fca9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fbda8dfbc10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fbda8dfbc10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.51s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key >> i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "10bb9b07e763456c9f317ccdf5ad2f8e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "1179faf118254e079da1672925defa71", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f56eed17bb0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f56eed17bb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'Map'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.29s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "9230a31ed80b4bbfb9d87dd4c65f1622", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff438e3fca0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff438e3fca0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 23.99s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3beb67b85f0842babb2cd38f5a34d70f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f38add3fa60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f38add3fa60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 40.80s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 | make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5c76e3217e3c474c812eee7869ec0a78", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f3cc593fbe0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f3cc593fbe0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.29s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2fa5d1c2bff9422ebb6229bfb4c65628", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "efb3c240432643b39b766eafbffc6a87", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [17, 11], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff6c4f3fbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff6c4f3fbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 24.19s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,10 +11,10 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "600563cfbf284331957e4a7082b77b8c", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efb8440fc40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7efb8440fc40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.78s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i << max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:"}]
[{"job_id": "bdeeaa2e326a425892268cf813656b42", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssinteger division or modulo by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.02s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "6c7e9d97a2e247d38c5416a5617c456d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f89d1b4b970>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f89d1b4b970>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.93s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "2f93e983c6b245d48c672bc1a6edc899", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fc11e81fa60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fc11e81fa60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 43.11s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key + i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "7ee2ba1b84d3455dab8ef91ec289aff3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f29cfd1bbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f29cfd1bbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 41.85s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key - i ** max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8c321167b5a94e45a5d9169c0835c5dd", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb5fedf3a60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb5fedf3a60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.44s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 0).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "1c76b29af53142d3a69d3d59f2f71bd7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8a8981bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8a8981bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 30.00s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "1be1b0c6a3fe4037aa2c30a22770c247", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7377b5bbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7377b5bbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 44.85s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "aab2d7117b254e148b0a16e57f007051", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f818290b9a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f818290b9a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 38.29s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "13de475c8bca49be839560d1c26950dc", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Pow", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.02\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7faced033bb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7faced033bb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.93s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ** min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f11e22f694dd46809a4d1718caf53d17", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f259315fac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f259315fac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 39.39s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "2ed42954f0454638b01bb77a96393d1d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [88, 73], "end_pos": [88, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7e9895bb20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f7e9895bb20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.88s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i // max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -85,7 +85,7 @@\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n     hist = -1 * make_hist().named(\"hist\")\n-    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n+    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key= 2).named(\n         \"sort_freq\"\n     )\n "}]
[{"job_id": "c0c13b91160042b185dbed38e7c26a6d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i << max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "f247f84245694419b37ef7a2e609d343", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f52c7bf3b20>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f52c7bf3b20>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 37.47s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "53e1e4dd65bb4796aa836a8b28a22b75", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "60654593ae0f48ea89900055035ee626", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for <<: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.47s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key << i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "3aedad8762464d0491df58b35aa751de", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcfcbb5bac0>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fcfcbb5bac0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 ^ make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for ^: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.08s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ^ make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "074506f4b44045b6bd19f47c557bc21d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_LShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, <<, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "7f9e04ee850a4bf6a404d5f1decf54cf", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [37, 4], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff6d952fc70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7ff6d952fc70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 24.95s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i + max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "be335b6dc6664f87959d409bca76a4b3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8fbf113c40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f8fbf113c40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.88s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i | max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "4b59ceeb5a05431a81900acedbab8541", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0ad623fbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0ad623fbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.15s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,8 +33,8 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.GT)\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "db6796b5e61840e18ac5951b82e152e3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.67s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "8d90058ec1e148caa0ee55acd2d2d133", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.08\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6340a37a90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6340a37a90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 40.51s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i ** max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 2 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "99f9ffd7b04240299c4b10ad38bf1db6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6a879f3b20>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f6a879f3b20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.24s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i ^ max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "d4f62e2c706449929a1829ca287757c2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [88, 4], "end_pos": [90, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f673834ba30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f673834ba30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 28.68s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -87,5 +87,5 @@\n     hist = -1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n-    )\n+    ) * -1\n "}]
[{"job_id": "81f6ccfd5d774275ae3970bcb1ea54dd", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Sub", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, //, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x - min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "a3573ff616514d5fb416f92c90216c11", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0bd7e23ac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f0bd7e23ac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 43.95s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens * -1, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -34,7 +34,7 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals * -1).named(\"sort\")\n \n \n def make_sort(\n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = ~1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "18d2423269a147ecb3ef60e8512e2d1e", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_Mul", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.26s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x * min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "d82bf7cbda0e4620b5325165ccabb8ce", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2e5e83fbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f2e5e83fbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.19s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices * -1, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "513fe9daed0a4310bc6fa93070910cff", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Add", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f53a7e3fa60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f53a7e3fa60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.06s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = 1 + make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "5fcbaf3f4c7341f7b271d3f020227d4d", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [36, 14], "end_pos": [36, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fca4115baf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fca4115baf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.97s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos * -1, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "9a8a9f374804421a94e8e520d8651d93", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fba6ef23c70>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fba6ef23c70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = +1 % make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for %: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.44s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = +1 % make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "e347a23251dd44a494b9147b9d66a084", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Sub", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f130532fc70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f130532fc70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.33s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -32,7 +32,7 @@\n       keys: Keys for sorting.\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i % max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 - make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f33b54e2b79b44fea5e26581b23464d5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdf80b0bbe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdf80b0bbe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.78s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, *, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 & make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "542d7e8f0f0042c38f4eacf0c574dffa", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [17, 4], "end_pos": [17, 53], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6524e17a60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6524e17a60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 38.48s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -14,7 +14,7 @@\n     same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n-    return rasp.SelectorWidth(same_tok).named(\"hist\")\n+    return rasp.SelectorWidth(same_tok).named(\"hist\") * -1\n \n \n def make_sort_unique(vals: rasp.SOp, keys: rasp.SOp) -> rasp.SOp:\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "2ec12e83f6034e2dbb02ccdc791a4fa5", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.08s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "dd14f7771da54eed9235a3d9d0773688", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,10 +31,10 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.GT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort("}]
[{"job_id": "a7d333e89ffc4daab5ebd22f591d148f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 ^ make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f8672328ba1c412abf5e88da24905bba", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitOr", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "5cd7a6ea412e42ef9d3b40c7d02d7484", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitAnd", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitXor", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,11 +34,11 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, ^, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key & i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "ad9447905f1442e6b392410e2d0d20b4", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "27276ba1aca344679cf116fbf7990976", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.53s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "6f7be568280642d9a83f45e0a1f059f9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd3ad34faf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fd3ad34faf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 45.47s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,9 +31,9 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.GEQ).named(\"smaller\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n "}]
[{"job_id": "01c51b9346694b70af75de98adcc1370", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "91e6dc27e07b41de874122af2d66b170", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [87, 11], "end_pos": [87, 12], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fdb7732fa90>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fdb7732fa90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/most_freq.py:88: in make_sort_freq\n    return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\nsource/most_freq.py:67: in make_sort\n    keys = rasp.SequenceMap(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tracr.rasp.rasp.SequenceMap object at 0x7fdb7732e4a0>\nf = <function make_sort.<locals>.<lambda> at 0x7fdb774fca60>, fst = False\nsnd = <tracr.rasp.rasp.Map object at 0x7fdb7732e500>\n\n    def __init__(\n        self,\n        f: Callable[[Value, Value], Value],\n        fst: SOp,\n        snd: SOp,\n    ):\n      super().__init__()\n    \n      if fst is snd:\n        logging.warning(\"Creating a SequenceMap with both inputs being the same \"\n                        \"SOp is discouraged. You should use a Map instead.\")\n    \n      self.f = f\n      self.fst = fst\n      self.snd = snd\n>     assert isinstance(self.fst, SOp)\nE     AssertionError\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:388: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = not 1 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "614e3bd805884901a46ad20eb3be93fb", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f737cf53ac0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f737cf53ac0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.37s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i & max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "4b94b7a5fa9a44e5945e087021fbda5a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mul", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [35, 17], "end_pos": [35, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5900f47bb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f5900f47bb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 39.85s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.LT).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -32,7 +32,7 @@\n       keys: Keys for sorting.\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n-    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n+    target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\") * -1\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i * max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "9097486b5f1f4c5f91fd4e9c4f9551f8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Pow", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [14, 15], "end_pos": [16, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcb15d1bb80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fcb15d1bb80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.53s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens * -1, rasp.Comparison.EQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.LEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ** i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "b7f081d6e16e4a1c8ec2d8355673d60a", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.29s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "9b751675126343a6887b776b3e6185e7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.31s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.NEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys * -1, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "e1636e5916f34e139b1880f8c7b31fa3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitXor", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_FloorDiv", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [36, 38], "end_pos": [36, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f6fdbfe3b80>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7f6fdbfe3b80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 // make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for //: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.22s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices - 1, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x ^ min_key * i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 // make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "ce583d04533144719669d017c5a2b9c3", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Mod", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [34, 38], "end_pos": [34, 56], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for &: 'int' and 'float'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.43s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,7 +31,7 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys, keys, rasp.Comparison.NEQ).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key % i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "c572fc8567654ec0aec9decf9290051f", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_FloorDiv", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Sub", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f397ac2bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f397ac2bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 20.22s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x // min_key * i - max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "f370d278933b446ea366d12c265dd928", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [14, 53], "end_pos": [14, 71], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [87, 12], "end_pos": [87, 13], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.53s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -11,7 +11,7 @@\n       hist(\"abac\")\n       >> [2, 1, 2, 1]\n     \"\"\"\n-    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.EQ).named(\n+    same_tok = rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.GEQ).named(\n         \"same_tok\"\n     )\n     return rasp.SelectorWidth(same_tok).named(\"hist\")\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key / i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = - 0 * make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "64e6149b35904513abcde8a6f7ddfba2", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitOr", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_Div", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssunsupported operand type(s) for |: 'float' and 'int'\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.31s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x | min_key * i + max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 / make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "d731522b7d5047a9a130d1f3c519f037", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_FloorDiv", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "fa28515d6f564b778bc0245803916aa6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Mod", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [34, 14], "end_pos": [34, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.13s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -31,14 +31,14 @@\n       vals: Values to sort.\n       keys: Keys for sorting.\n     \"\"\"\n-    smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n+    smaller = rasp.Select(keys * -1, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, %, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n "}]
[{"job_id": "c1deef2f2dd2480287dfc5f2dfb860b6", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_RShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [36, 52], "end_pos": [36, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssE\n\n==================================== ERRORS ====================================\n__________________ ERROR at setup of TestMostFreq.test_model ___________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7fb81b7fb910>\nmethod = <bound method TestMostFreq.test_model of <tests.test_most_freq.TestMostFreq object at 0x7fb81b7fb910>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_sort_freq(self.maxLength), \"most-freq\")\n\ntests/test_most_freq.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmax_seq_len = 10\n\n    def make_sort_freq(max_seq_len: int) -> rasp.SOp:\n        \"\"\"Returns tokens sorted by the frequency they appear in the input.\n    \n        Tokens the appear the same amount of times are output in the same order as in\n        the input.\n    \n        Example usage:\n          sort = make_sort_freq(rasp.tokens, rasp.tokens, 5)\n          sort([2, 4, 2, 1])\n          >> [2, 2, 4, 1]\n    \n        Args:\n          max_seq_len: Maximum sequence length (used to ensure keys are unique)\n        \"\"\"\n>       hist = -1 >> make_hist().named(\"hist\")\nE       TypeError: unsupported operand type(s) for >>: 'int' and 'SelectorWidth'\n\nsource/most_freq.py:87: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py::TestMostFreq::test_model - TypeError: unsuppor...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -33,7 +33,7 @@\n     \"\"\"\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n-    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n+    sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.LT)\n     return rasp.Aggregate(sel_new, vals).named(\"sort\")\n \n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices - 1\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 >> make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "07cb56996a3f495c84345ad4db9665d7", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_LShift", "occurrence": 1, "start_pos": [87, 14], "end_pos": [87, 15], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Pow", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\nE                                         ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.24s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, **, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n \n@@ -84,7 +84,7 @@\n     Args:\n       max_seq_len: Maximum sequence length (used to ensure keys are unique)\n     \"\"\"\n-    hist = -1 * make_hist().named(\"hist\")\n+    hist = -1 << make_hist().named(\"hist\")\n     return make_sort(rasp.tokens, hist, max_seq_len=max_seq_len, min_key=1).named(\n         \"sort_freq\"\n     )"}]
[{"job_id": "347ea0728e544825b3afe92143eb65b8", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_RShift", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [68, 58], "end_pos": [68, 70], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [37, 11], "end_pos": [37, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\nE                                       ^^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.26s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -34,11 +34,11 @@\n     smaller = rasp.Select(keys, keys, rasp.Comparison.LT).named(\"smaller\")\n     target_pos = rasp.SelectorWidth(smaller).named(\"target_pos\")\n     sel_new = rasp.Select(target_pos, rasp.indices, rasp.Comparison.EQ)\n-    return rasp.Aggregate(sel_new, vals).named(\"sort\")\n+    return rasp.Aggregate(sel_new, vals).named(\"sort\") * -1\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, >>, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices + 1\n     )\n     return make_sort_unique(vals, keys)\n "}]
[{"job_id": "98d5c9a2d9d94c8ab0fe0169767ecf53", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitXor", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_Add", "occurrence": 1, "start_pos": [68, 37], "end_pos": [68, 38], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [70, 4], "end_pos": [70, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_most_freq.py ssAccuracy:  0.0\nF\n\n=================================== FAILURES ===================================\n___________________________ TestMostFreq.test_model ____________________________\n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1ef5d5bb80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_most_freq.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_most_freq.TestMostFreq object at 0x7f1ef5d5bb80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_most_freq.py::TestMostFreq::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.65s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -65,9 +65,9 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x + min_key ^ i + max_seq_len, keys, rasp.indices\n     )\n-    return make_sort_unique(vals, keys)\n+    return make_sort_unique(vals, keys) * -1\n \n \n def make_sort_freq(max_seq_len: int) -> rasp.SOp:"}]
[{"job_id": "6f5dcf00a99b424d8c3dd99809a3f9e9", "mutations": [{"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Add_BitAnd", "occurrence": 0, "start_pos": [68, 23], "end_pos": [68, 24], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Mul_BitOr", "occurrence": 0, "start_pos": [68, 33], "end_pos": [68, 34], "operator_args": {}}, {"module_path": "source/most_freq.py", "operator_name": "core/ReplaceBinaryOperator_Div_BitAnd", "occurrence": 0, "start_pos": [41, 36], "end_pos": [41, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting experiments/mutation/tests/test_most_freq.py _________\n../../.venv/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../.venv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n../../.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module\n    exec(co, module.__dict__)\ntests/test_most_freq.py:11: in <module>\n    from experiments.mutation.source.most_freq import make_sort_freq\nE     File \"/home/andre-silva/RASPing/experiments/mutation/source/most_freq.py\", line 41\nE       vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\nE                                       ^\nE   SyntaxError: invalid syntax\n=========================== short test summary info ============================\nERROR tests/test_most_freq.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.25s ===============================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/most_freq.py\n+++ bsource/most_freq.py\n@@ -38,7 +38,7 @@\n \n \n def make_sort(\n-    vals: rasp.SOp, keys: rasp.SOp, /, max_seq_len: int, min_key: float\n+    vals: rasp.SOp, keys: rasp.SOp, &, max_seq_len: int, min_key: float\n ) -> rasp.SOp:\n     \"\"\"Returns vals sorted by < relation on keys, which don't need to be unique.\n \n@@ -65,7 +65,7 @@\n       Output SOp of sort program.\n     \"\"\"\n     keys = rasp.SequenceMap(\n-        lambda x, i: x + min_key * i / max_seq_len, keys, rasp.indices\n+        lambda x, i: x & min_key | i / max_seq_len, keys, rasp.indices\n     )\n     return make_sort_unique(vals, keys)\n "}]
