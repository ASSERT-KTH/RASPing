[{"job_id": "0025d214e8ad403f9771a909c9679d65", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.838\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x778436f34ce0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x778436f34ce0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 43.82s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length + 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "8d1a6caa2e7d44bcb4e7c8232c62eee1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.872\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72dc70be9430>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72dc70be9430>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "7b68eceaec6344f488ce562e14c82d32", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.836\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7802557151c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7802557151c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 35.06s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length / 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "4eac21f81c8d4c77831cf49aa4298d0d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7724df90f2f0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7724df90f2f0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 2.06s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "ce1a53a1d0ae41cc8dcec3f7e707ad24", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff2036b6990>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff2036b6990>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.29s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "78ff14fbe9a042a4a356e011129c85e2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70df55e42b70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70df55e42b70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length ** 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.48s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ** 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "f34899ed97fd4bf9b855a8014c14e7bc", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d76f13d0f80>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d76f13d0f80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.85s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "db36169772c2472eac81fccb01e519ad", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b3bbd383980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b3bbd383980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.36s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3bf30429bbc94d6f834404be37d2c4bd", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.84\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x765e4f68f9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x765e4f68f9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 48.40s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length | 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "314f5920a4bb451e9dffd84d5b05f20a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.826\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ac66c915970>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ac66c915970>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 47.48s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length & 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "cc3898bec9934b44a1a150fe927b9d0a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e41a5dbf350>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e41a5dbf350>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for ^: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.32s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "d90be8956b5044acba7499a4ae625435", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Add", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 45.67s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative + (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "ac264b02cdae47278b9bdef8beba3ad5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Sub", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 51.28s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative - (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "3bdec6c5e39f47fa96880b3c9ab6cbf7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mul", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 49.22s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative * (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "0c144068ec5445a7b38191fb8875131a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Div", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.29s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative / (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "d81c8e09231345e2b356229246068aa3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_FloorDiv", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.20s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative // (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "89062ea28e3847aab531d8335f04edf3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mod", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.00s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative % (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "37719f5999a04248b00fc7b02d865858", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Pow", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 29.97s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative ** (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "d9ea7b8c4dd0425c838f25ead704f5c5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_RShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 30.59s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative >> (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "ff72213822d94687b60bb3ad3b515f3c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 33.52s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "5389aacbb2e943ea84c8fb8fda0f5c28", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitAnd", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.95s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative & (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "724134fcc6fd4154935129b4c8387b5b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitXor", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 57.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative ^ (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "67bf5c40912e4beea61e920835a4264f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 36.99s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero + (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "90dba184d08044329a02a0593cd96463", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.084\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x73e0cf6679e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x73e0cf6679e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 42.50s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero + not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "365558b72a1b435a9d7a9ca2efc04afa", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.63s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero - (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "afaf72dc9fd845a5a3eb9a323abda430", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.104\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x759b5e980380>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x759b5e980380>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.68s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero - not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "064e7954305f46b18b09cec7cc36fb23", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.76s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero * (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "b1f3f3db307e4d6abb2976ed32db83f2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.97s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero * not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "5fc1fd39ebb64620895792099985b5e8", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.64s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero / (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "dfeb4474e35c4b0094908a1e97feb31a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero / not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "d391e77c656c4401baeff4a142c227d0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 53.98s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero // (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "09b5828203fc4a5591844b8920142f0c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7c6bcbb73980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7c6bcbb73980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero // not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for //: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.30s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero // not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "6d75f7091e1d41e5bd1530b712f6a323", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 30.36s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero % (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "c3ccc72e1065445e84f038aacab2f275", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x733b0bc286e0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x733b0bc286e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.37s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "af0c352fb9ec407ba44455239c4cbd48", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 30.17s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ** (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "5b83ab0751b7402aac9cc737d6033ea5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x746b9f26f980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x746b9f26f980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.56s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "e76459ef88d34513a1f0ad13f4f09429", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.23s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero >> (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "1e5382615b7e43e0baaa46fd5b7f861b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x790b4a146720>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x790b4a146720>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero >> not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for >>: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.39s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero >> not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "dfdf8d649a824e6c84d3dc9ebec9521e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.39s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero << (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "be29eef5c6134ccba1d0f416d37ace96", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x74415a1e98e0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x74415a1e98e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero << not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for <<: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.23s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero << not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "fec147cb2a244cac8ec362507731f459", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero | (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "fc0729c63e1a4c449a367995302bceec", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.546\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71cd8af7f140>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71cd8af7f140>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 27.54s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero | not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "18ae78b46b12486bae616bea9e922368", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.08s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ^ (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "cc38520ecf4d49379ae7c9cf072a5500", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7169f0f256d0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7169f0f256d0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ^: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n========================= 2 skipped, 1 error in 1.36s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "c89293882b2745b19c8463a178e1e837", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.482\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x766fc86ec080>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x766fc86ec080>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 52.88s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop != open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "db2436332111488899d3cb70a2f11e76", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.488\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7be345a83980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7be345a83980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.12s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop != close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "f27655e4e9644b758fef21bcd18c2a9b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70a7ef75b980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70a7ef75b980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) != 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.25s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) != 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "52610d0dfcf545908b8a8094557cefc1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.358\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b9fec2add30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b9fec2add30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 46.74s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] != 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "f63829cd25b549fea4453027a39caf34", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 36.57s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance != 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "c0f7fb924065439a988c3ada817d8c13", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.454\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x781001452e40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x781001452e40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 26.95s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop < open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "951263a935354f24b2988574f76524c4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.526\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75182124db50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75182124db50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.69s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop < close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "be40baaa1b874216b22488874264b8e3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x703c57563980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x703c57563980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) < 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.37s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) < 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "412f2b2409644323b1619004d4b201fb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.488\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7bfbb1370080>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7bfbb1370080>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] < 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "025c559f2182431f87656dbfae131990", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 44.57s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance < 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "75b4f5503ef34c249443b68b56da2137", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.61s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop <= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "e9f5267568c6459283c58c9e9c2d7f52", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.484\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a3f4179ecc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a3f4179ecc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 29.91s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop <= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "0e72980d3dd1481896b72faf4fec3c0f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.44s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "3306b86ac1274e4b8b42e1c28c0685e4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 46.42s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] <= 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "ce91646719f24bbab4930d58ce4a0045", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.39s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance <= 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "a604a45ac0574fa0b2f52fb214914212", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.522\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x752348ef8800>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x752348ef8800>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.39s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop > open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "a8f92bfe2ff049579242d1fba59301ed", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.5\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b8c73e97980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b8c73e97980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.15s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop > close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "edddfb7a8b424432b660682266c8399e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d0235609f70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d0235609f70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) > 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.89s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) > 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "7a7c876484e84873aa9a1ccdd4f96a75", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.334\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x788c94562720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x788c94562720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 54.97s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] > 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "9824771e3f1445d1b3acb4bf8761d17e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 29.12s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance > 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "5b4a0cf372394447a75f69bd01fd0f18", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.512\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x78ede89464e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x78ede89464e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 50.94s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop >= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "2d8e4af7895f4317a60ec985ebf0152c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.20s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop >= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "b38c412380ee41ca92b98372c5e75666", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.71s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) >= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "2f4f3d7242a04047b84db7ba70fc7404", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.836\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x700b885fb980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x700b885fb980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 33.11s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] >= 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "f2f6847c29a145d5a24b981a8985b910", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 29.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance >= 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "f1e82ef3d06c4763954996053d174d9e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x73fc787b8e60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x73fc787b8e60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is open_token).named(\"bools_open\")\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n========================= 2 skipped, 1 error in 1.36s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "2c2619cda246412aa5c9eaec7e7975d8", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76b5cf5ca0f0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76b5cf5ca0f0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n========================= 2 skipped, 1 error in 1.33s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "107e7d5f13034b759c478b4d886f854f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7eddbbd27980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7eddbbd27980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n========================= 2 skipped, 1 error in 1.70s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "07c22b807f3d4e59936d75e4b1ffb38b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x700eb494a720>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x700eb494a720>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.12/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n========================= 2 skipped, 1 error in 1.32s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "af1faaf4342740b89926c61c85b1692b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.512\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe8bf1a9880>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe8bf1a9880>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 57.79s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] == 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "2bd1b2e9544942289f446693ee478adb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 34.95s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance == 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "05410c4865444b729285bd4ad936be74", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.552\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70e186586720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70e186586720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.03s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] != 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "baa364d37d6f47c291f2d25d31e42c1e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 30.35s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance != 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "98f2b906f13e4377a785085fddb3a4d2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.526\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72c317043980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72c317043980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 50.54s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] <= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "2f8a0d4f4d084d02958ac546179e6c9e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance <= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "bdcbc9bb84da4153b213dbe2f0b31600", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.524\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7cfc25ed3770>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7cfc25ed3770>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.61s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] > 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "b026d179cb964c10a7597ac63872090c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 28.62s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance > 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "8385360d0a0a43afa87a23aab8eef714", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.504\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ccf17e8f980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ccf17e8f980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.29s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] >= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "2aeb20f652224e1e92052c7b19a5aa95", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.13s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance >= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "dfcd302ba4084ceabc4d624855b0c802", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Eq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 38.25s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) == 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "afe63ab086bc4b2ab5f5885add176d4b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_NotEq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x770ee19539e0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x770ee19539e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) != 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.35s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) != 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "aa11b80fcba54140a2e605dbfa912758", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Lt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a1ad4d07980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a1ad4d07980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) < 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 2.62s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) < 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "2e00e706fe734311b4e55b02471fb1f3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_LtE", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.71s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) <= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "16d851ff0b8a44f08f3676b390439291", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79ba44f07980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79ba44f07980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) > 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.35s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "3b9ce1db98b34710b5e50a72b3e0bee4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.562\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79b9d95c64e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79b9d95c64e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 26.91s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, +1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "6dc719cf199b4801a2b4d25d3dccf89a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.492\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76f9f606f350>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76f9f606f350>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 43.51s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, ~1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "a145c80731434f839ead4831d2c8f23a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.486\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b3c9998c2c0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b3c9998c2c0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 24.70s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, not 1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "0015996f24df40259db46927eba8565b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.516\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71d693971400>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71d693971400>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 29.65s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "c0c19c3231d6404084585806378d38e6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_UAdd", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e1a06fe2270>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e1a06fe2270>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (+has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary +: 'Aggregate'\n\nsource/shuffle_dyck.py:134: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: ba...\n========================= 2 skipped, 1 error in 1.37s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (+has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "fbfbeba130f845a3a4b041144ca65619", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_USub", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e9ee22f7980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e9ee22f7980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (-has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary -: 'Aggregate'\n\nsource/shuffle_dyck.py:134: TypeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: ba...\n========================= 2 skipped, 1 error in 2.07s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (-has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "8775e59fe1834048963c0e2b1319f600", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_Not", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7987d20a6720>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7987d20a6720>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (not has_neg).named(\"not_has_neg\")\nE       AttributeError: 'bool' object has no attribute 'named'\n\nsource/shuffle_dyck.py:134: AttributeError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n========================= 2 skipped, 1 error in 1.81s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (not has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "6967d2299b5d40c79f47bf9254a036d0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_Invert", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nshuffle_dyck: (Non-linear) SequenceMap only supports categorical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.31s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "8dea91af17df46a49b7cf5e3fb3d797f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x701c0ddee720>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x701c0ddee720>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert not len(pairs) >= 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 2.11s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) >= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "a0bcfd893b8c494e81723aa99543145f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 1, "start_pos": [100, 15], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75a7bec421b0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75a7bec421b0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert not len(pair) == 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.97s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert not len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "44860fc3b19f493d919cab74c0ff10eb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.56s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "24f12eec84594a64920c1b19c0d7421f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= -1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "f0dc22b1ea76410aab606bf589affbb0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.484\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7bd6f258fd40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7bd6f258fd40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 29.95s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "a6f41c9545134fba89a05d325745fe50", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.43\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76a3a1cc7fe0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76a3a1cc7fe0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.40s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "2ece0d27e5a947cca276924ebeea6c64", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 4, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.444\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b6c87927980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b6c87927980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 49.37s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 2))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "991eba5a72054e0891d2f37fae210fb8", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 5, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.478\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72a69625cfb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72a69625cfb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 26.74s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "6da00cb338a74bafa182a94eb5806e02", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 6, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b03d01561b0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b03d01561b0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.40s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "ea8ae4d0b91645489d7089b55026d732", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 7, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 29.57s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "b0081658dfb741e5ab6b0a6ad5733d50", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 8, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b4e27c76180>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b4e27c76180>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.40s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "08b4d70e4e0d4545af230849c68caeb8", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 9, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd380217f80>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd380217f80>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.26s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "770108b0501f40d690b7aafe583ab32a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 10, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79d9c8d33980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79d9c8d33980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n========================= 2 skipped, 1 error in 1.76s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "67a6cf823e354958b32dd27097d4085b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 11, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "7f3587af62e44f51aa05dfc920e28236", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.528\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75791f9c39e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75791f9c39e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 44.21s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "d6f25ae0294d4baaa0d98c32392420d9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 13, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.762\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x716dd2acb980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x716dd2acb980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 41.45s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "dbe1821f53eb4e75a76874d421fd6de7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 40.81s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "45caedec59214b4b94f0b3af4324619b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 15, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 38.38s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "d65d461f9cc34b228d12bfdd899bcb13", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 16, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 42.85s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < 1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "42b54ecc87584f8cb1d8dc68c79300ec", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 17, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 51.04s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "b39b1dddb0c24d1e93edf0a37124c292", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 18, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.74s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "7d39f4ae64ce4f6e962f26e5783bbe92", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.34s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "629ef809e53842e69ae3b32d4bbeb833", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 20, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x720c2c50f9e0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x720c2c50f9e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n>       all_zero = balances[ 1] == 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:125: IndexError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n========================= 2 skipped, 1 error in 2.30s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "86a2732f938b4b6cba47cecf33b768be", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 21, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 39.94s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "f660f76121da48f6987ad1a9705cd033", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 22, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.464\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7162b646b950>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7162b646b950>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 46.70s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "cc10500eaa76416e93c5faea79b62092", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 23, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.508\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70516353f500>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70516353f500>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.59s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "77330f4a008f4968b1fcfe65e45db12f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 24, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 26.37s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "e4ccd32335cc45c988265f575d41bd49", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 25, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "e6185276bc604d958e3521edc6d6128d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 26, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.60s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "ad8b698747ab4f8f9024e291d8a8c1a1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 34.15s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "673da381f99942aab0bcb0805b010ed6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 28, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "2721d28d4b8945739d3992c6e8f836a1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 29, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.854\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7185b84e7cb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7185b84e7cb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.88s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "4f91dc5b7ac943fcb1c0f1174839c17e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 0, "start_pos": [99, 16], "end_pos": [99, 21], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7bce9dfc03b0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7bce9dfc03b0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in []:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[0] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n========================= 2 skipped, 1 error in 1.23s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -96,7 +96,7 @@\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n-    for pair in pairs:\n+    for pair in []:\n         assert len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance("}]
[{"job_id": "5dd30f2af81a4e5f948167801ca54b9d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 30.23s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "61f141bac2904282a1ab1ad313ce7b26", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 47.71s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "45f8b096d45e455399116ce7e30cd5f1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 0, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.588\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75c0b5bffe30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75c0b5bffe30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.60s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.EQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "2e8f29db57924b6883d0d1a068da1914", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.504\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7257e401b980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7257e401b980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.77s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "bfd61e85d17342a1b3e0250754f7cb6a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.596\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72ac2dfe07d0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x72ac2dfe07d0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.82s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "5a8fe7a542b6492c9abb4f05c812aaeb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "ee25937ca9304c67acb8d69e43bb1bfb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.626\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76984046ef60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76984046ef60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 44.04s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "8a38eb4772b74481ba408fc55183144e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.56\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7358122479e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7358122479e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.20s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "f145bad3849944d889a6cd9a6c71332e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.816\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7418cff2f9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7418cff2f9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 29.62s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "1ac64a7704244fa0850f106c1479dd1c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.476\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x73efe8648a10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x73efe8648a10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 48.27s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "ecc7532dbb014ed0971ccbba96c223dd", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.448\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79de7bc0f9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x79de7bc0f9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.79s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "2ee30815b92a426aa9091a41708c79d6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.296\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f69f6d87980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f69f6d87980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.52s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "ef386a4314da4ca5a7d41e0c8b6984b7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.244\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x779efb61b9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x779efb61b9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.64s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "21228f159cd8486ca478516f2607cfe6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.498\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ae539b0f9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ae539b0f9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.12s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "f06bdcc3fe044b7f85b5770b71674390", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.466\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7dafade33980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7dafade33980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 31.97s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "115df6277ec94a8594bdd69e3a6dd8ac", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.75\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7380c38f7980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7380c38f7980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.26s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "3ec9ffa5dd9e46289ce27b7ba0dd3d6c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.756\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d36df1ce4e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d36df1ce4e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.64s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "93aa793ba6b744988095e6db739889f1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.726\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7c1087136f60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7c1087136f60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.49s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "06886b53eefe4c158a3945da6e52e9ee", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.89\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7856435fa780>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7856435fa780>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.51s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "2518e30c87b3416eae4dceea43dd05f4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.766\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x74a9d4f3a720>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x74a9d4f3a720>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 29.31s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "d4babb2ef847415ea8647c846c6647ed", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.742\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x74258db3c830>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x74258db3c830>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.00s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "3cc7082c4d6a4724acf83a30fce55c8b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.8\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7043a557c1a0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7043a557c1a0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 27.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "fa9b91c3b9664722b9d7c18b27af9e4e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.746\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x707a3d797980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x707a3d797980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.20s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.FALSE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "8a3a79a2220743b0accb84ca0ef360e1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 21, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.488\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x78b0adf4ffb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x78b0adf4ffb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 31.03s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "8d3f55865c654548949429e6aa11220b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 22, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.574\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd3e3249460>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd3e3249460>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 58.45s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "0db1df0aec8b4b219066e889f37536b0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 23, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.506\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b843c0b1d00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b843c0b1d00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 48.49s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3ca72defc49e4eb0be305ead4638f385", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 24, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.GT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "33ce1351dbc84c66afc1d265b4f18d64", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 25, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 29.50s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.GEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "87fc2253d6ad49618add9d927dc3e45b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 26, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.51\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e39686b8d10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e39686b8d10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 36.50s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.NEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "64b68e6c188c432a94610b344a2cbe4e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 27, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.548\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75ec9c6a78f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75ec9c6a78f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 47.29s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.TRUE).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "b2c4f1b475614c299bdffba3a03ae734", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.18s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "c9506f6595134b259f329ad9f5228e3e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.466\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x796e9c6806b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x796e9c6806b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.48s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "3a446a03923a4382b4cb8455a30d9007", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.468\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76c310217980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76c310217980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 38.03s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 2))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "c400820010054cf49f73d81fbb8d74cd", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71d6faf9f980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71d6faf9f980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.31s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "0cb8ad77f5fa4954b747f011c6db1aac", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ef2303bb980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ef2303bb980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.72s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "f518dfaf7eef4a49a6aecd0902f9b6b3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b33493f18e0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b33493f18e0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n========================= 2 skipped, 1 error in 2.31s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "b1c9b94219f0442683936b7788c090c2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.542\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e731dda9a60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e731dda9a60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 29.24s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "529da235345d47cd8f953d81410000b2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 46.41s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "652d78dcca7f427889f4f4cec09e26b9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 29.75s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < 1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "9ca4e23093fa4cbaa41a05b3fa33f1f0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.13s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "da087e67c20b4375a760b459364d478c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x78cb5d33f980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x78cb5d33f980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n>       all_zero = balances[ 1] == 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:125: IndexError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n========================= 2 skipped, 1 error in 1.43s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "ee4f18f3f65340259d951efad2a2fe0a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "8ec2af61f2f24f54bcfdefc0b55a00d9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 12, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 52.98s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "94ec91ff04354fbeab6012432f1ea728", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 13, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 45.87s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "2ed0355305af4295b8200933afbecb1d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.456\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x715953183980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x715953183980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.23s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "666f878eb1d04b96b97ed7692dfee2cb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.96s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= -1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "6e40ed77ef834d5da282649803ec83ce", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.462\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4f1182b980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4f1182b980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 27.73s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "05c2933fd5b64e5d9b4faba7a50c51d6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.492\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76513d7439e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76513d7439e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 26.36s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "6389682e4242493caadf4baadb300f17", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 38.90s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []"}]
[{"job_id": "36727da364ed492dabae993a195b8070", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x708501def980>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x708501def980>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n========================= 2 skipped, 1 error in 1.39s ==========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token"}]
[{"job_id": "fe444c19b03c4987a8a60914e22d30b3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.51s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "9071394b8418406a9b8bbf78e8b1a7e9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.764\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x77b502b34bc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x77b502b34bc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.30s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "2a888538dfe8442784c2ffc366d177e6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 43.07s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "a2bb9967dd04492f91d192ca86b5acf4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 47.70s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "bf75e0d92aac4927a74557cdcbe038af", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.39s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "80a8dccb5fa749eaa76cedbe895fb3c2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.38s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "d3f45c9d86ca45ab98cdc937e373564c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.498\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71851229f9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x71851229f9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 31.41s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "56de444078f1454181f2f1385ae9daae", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 12, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 53.95s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "a69f883ab5d14b21bb69ac9ad1626dfa", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 13, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 41.19s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "9e9a93e4952f4557a07dcad5d54eef04", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "96f7f99bdc024576b46c9140b27e1cbc", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.48\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b7147c77ef0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7b7147c77ef0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 34.95s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices + 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "92fdb806b37a4ab39b16c5740b44459b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.924\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a471229f9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a471229f9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 45.76s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "9ca443822a9a466393461512e2ee58a7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 58.42s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices + 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "6785ac31e09c4dc18a9000102920fdb4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 49.80s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "ae03ba0366f1458f853ddb2374dd4f47", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.504\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ebfb3c62750>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ebfb3c62750>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 29.28s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "bacf3e95b6ed4c129ae6233973cb88d6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.894\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76daf820b9e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76daf820b9e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 57.04s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "accfec1eaa054f8f904ea3c8f106ca3b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.464\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ec5ede258e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ec5ede258e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.63s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "9ee9afda21c34eee9f7c887d132ebb27", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 33.92s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "650af203df63406ea7d55b0c190bfcec", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.26s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "c37fc5183c63429da06bffe55c4c4d29", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.828\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75c95a86f740>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x75c95a86f740>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 54.37s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices - 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3b4ed0a1025b4b9aafaa64e283ff1a19", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [20, 4], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.816\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x799f5531e7e0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x799f5531e7e0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 28.52s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "4fbf5c2c11bb48aa80b84651cc8db5f6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [45, 4], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.46\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70881c217980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x70881c217980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 32.72s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "1a0b84ac21304732a7f7ff02a0473b53", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [77, 4], "end_pos": [77, 45], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.512\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76e5e7ee3980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x76e5e7ee3980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 33.10s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -74,7 +74,7 @@\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n-    return pair_balance.named(\"pair_balance\")\n+    return pair_balance.named(\"pair_balance\") * -1\n \n \n def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:"}]
[{"job_id": "c3ba059024ab4a86ab972e0fe118d636", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [135, 4], "end_pos": [135, 58], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.49\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x793696dbb980>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x793696dbb980>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 58.15s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero & not_has_neg).named(\"shuffle_dyck\") * -1\n "}]
[{"job_id": "1595aa6e5e7e4503b552fcc0cab1adf2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [17, 24], "end_pos": [19, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.96s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens * -1, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "8bfbbe5c4929401b84d4c1f9b9ac373a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [17, 24], "end_pos": [19, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.80s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens * -1, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n "}]
[{"job_id": "5bc8486cf0394d9897d7d9da6ce7cadc", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices * -1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "854c7e8d1cf14b059751e1637359adf6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "timeout", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n "}]
[{"job_id": "d4d1d63fef6e4bfa986c0b8e3dcf1338", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 33.64s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices * -1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "0d0597560911458f9e32e8a4d442e938", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 32.50s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "bff62aa8ede444babba1c173ddcda0ae", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 6, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.812\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x712fb4dd5250>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x712fb4dd5250>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 44.78s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices * -1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "214492e9a34a4ee088f01549de56b29c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.83\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e5f756bd8b0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7e5f756bd8b0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.27s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "a1fd8f99e17f4212a98268c50c41d27d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \ncloses: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.04s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools * -1, default=0)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "aa328af89c9345319f202892a28f0b1a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.24s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "29446dafbb2747a6b156959bc5527330", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 2, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 31.12s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -129,7 +129,7 @@\n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero * -1).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "4cb5521bfa38409a8c80089401c4c04f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [20, 11], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.84\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f2a283c3cb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f2a283c3cb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 30.25s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()"}]
[{"job_id": "6c297f05ac6943f9b0c620a6ea9ecbf7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [43, 12], "end_pos": [43, 33], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \ncloses: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.25s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -40,7 +40,7 @@\n       frac_prevs: SOp mapping an input to a sequence, where every element\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n-    bools = rasp.numerical(bools)\n+    bools = rasp.numerical(bools) * -1\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n "}]
[{"job_id": "3fc79b5b7ce6443394019a62395dbd7d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [45, 11], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.416\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a2159482420>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7a2159482420>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 51.48s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "e3e56af5ee5a4b819d3b38748bdade71", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.27s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0) * -1).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:"}]
[{"job_id": "0158a76d5b4943e494f4eb7405fab56f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 4, "start_pos": [70, 17], "end_pos": [70, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 2.00s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\") * -1\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")"}]
[{"job_id": "023315742bc446b1af1a6f6eecaaac86", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 5, "start_pos": [71, 12], "end_pos": [71, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.44s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -68,7 +68,7 @@\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n-    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n+    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\") * -1\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")"}]
[{"job_id": "9365b85bd29740d1a0a9b7c069965ff3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 6, "start_pos": [73, 18], "end_pos": [73, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.28s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\") * -1\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))"}]
[{"job_id": "49d85dd6945b4e77b8321864c8533d9c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 7, "start_pos": [74, 13], "end_pos": [74, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.67s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -71,7 +71,7 @@\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n-    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n+    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\") * -1\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n     return pair_balance.named(\"pair_balance\")"}]
[{"job_id": "897941291111403b8cc1f84794b05d26", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 8, "start_pos": [76, 19], "end_pos": [76, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.544\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d1aaea1a6f0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7d1aaea1a6f0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:45: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n======================== 1 failed, 2 skipped in 39.07s =========================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1)) * -1\n     return pair_balance.named(\"pair_balance\")\n \n "}]
[{"job_id": "6b91ae89b7fd4c8b9b1bad80d6fb2826", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 9, "start_pos": [113, 19], "end_pos": [115, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.50s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -112,7 +112,7 @@\n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n-    )\n+    ) * -1\n \n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\""}]
[{"job_id": "b3efb7c24f3442f9a45d9509d9801723", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 1.56s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -110,7 +110,7 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n "}]
[{"job_id": "10d6dde9afdd484e8305290c0c720d4a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 11, "start_pos": [120, 14], "end_pos": [122, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 46.94s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -119,7 +119,7 @@\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n         \"has_neg\"\n-    )\n+    ) * -1\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0"}]
[{"job_id": "dca200a6916a401f9f2332774a418592", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 12, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n========================= 1 passed, 2 skipped in 3.97s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0) * -1).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "6244423657fa4d908a04e70bb3eb63bc", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 13, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0\nrootdir: /home/andre/Repos/RASPing/experiments/mutation\nplugins: anyio-4.4.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  1.0\nMODEL IS NOT BUGGY\n.\n\n======================== 1 passed, 2 skipped in 34.51s =========================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -129,7 +129,7 @@\n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\") * -1\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
