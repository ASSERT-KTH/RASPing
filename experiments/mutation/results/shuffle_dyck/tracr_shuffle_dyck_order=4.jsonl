[{"job_id": "8ef751b952eb4b399011573c88bff848", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.96s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) >= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -110,7 +110,7 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length + 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "a9ae26f0bfe641dd9afc7b6e241ad223", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_UAdd", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 10, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 12, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbcfb743cd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbcfb743cd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.01s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -122,8 +122,8 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    all_zero = balances[0] != 0\n+    for balance in balances[ 2:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (+has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "19434864fa1e42ae9c2084b358bac98d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_USub", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 29, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f329060fc70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f329060fc70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (-has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary -: 'Aggregate'\n\nsource/shuffle_dyck.py:134: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: ba...\n==================== 2 skipped, 1 warning, 1 error in 3.11s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (-has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "b56427133c704d02ad72d112ed62b10e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd937e0bdf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd937e0bdf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 24.87s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] >= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance < 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "df6ab23148f34143a8d69d9ae7b34b4b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Sub", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 18, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.21s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, ~1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative - (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "e30d697174d44a688354bea95b8c8767", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mul", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f045dc3fd60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f045dc3fd60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert not len(pairs) >= 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.07s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) >= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative * (balance < 1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero >> (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "afc41b95b9a145efa45b117955b66363", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_RShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 0, "start_pos": [99, 16], "end_pos": [99, 21], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f88e3e07cd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f88e3e07cd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in []:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[0] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.25s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -96,7 +96,7 @@\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n-    for pair in pairs:\n+    for pair in []:\n         assert len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative >> (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n         \"has_neg\"\n     )\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero - not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "8a1c1fbf7b47481eb27cea1f2162fcc0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 13, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7febd0c17d30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7febd0c17d30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 32.14s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] >= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero << (balance == -1)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "0069ba3ee96a4cdf8392b69e97636de4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 25, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6a96f1fdc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6a96f1fdc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.27s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,13 +67,13 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop <= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "a8a409f2cde242648e04464fb1dd9b8d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "40d81c6eee6f4a99b57a3c8a85e63b03", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 8, "start_pos": [76, 19], "end_pos": [76, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5073d1fc70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5073d1fc70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 2.94s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1)) * -1\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero // (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "fc9ab82d82ed41849c32c5786bee76c1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Lt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fdfaef67d00>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fdfaef67d00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) < 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.24s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop > open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) < 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "f62652b260fe4af994ea9d6a4cff47c3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 10, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "e043313931df40529fdeece26af70d30", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.22s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop > close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "08121148018744cdaddfb28cafc4e405", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 13, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f35d4913ca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f35d4913ca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < -1\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices - 1, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero << not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for <<: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 2.99s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices - 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero << not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "72641b8a6f3a428db6f75d2e6772e124", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_UAdd", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [77, 4], "end_pos": [77, 45], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3b85943d00>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3b85943d00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (+has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary +: 'Aggregate'\n\nsource/shuffle_dyck.py:134: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: ba...\n==================== 2 skipped, 1 warning, 1 error in 3.32s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= -1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -67,14 +67,14 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop > open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n-    return pair_balance.named(\"pair_balance\")\n+    return pair_balance.named(\"pair_balance\") * -1\n \n \n def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (+has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "72ecb452f114408aa4713046bdfc3735", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8dded53dc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8dded53dc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) > 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.27s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "feac4f6811dc4c37801535a4a644c292", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitAnd", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 9, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fba2a5ffd90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fba2a5ffd90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, not 1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] > 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative & (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "a11b176d3c634756af6ba121c985fce2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.99s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -117,16 +117,16 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ** (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "1520ab17e39d4814ac9d9ebbddaeeccb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_LtE", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "602a0562cae149e0bac0fdc4404593b9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fba18f57c70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fba18f57c70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero // (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.34s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero // (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "ddcc18e2d13b41c8917b00c5dfe85d02", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd607b5fdc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd607b5fdc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < -1\n        for balance in balances[ 2:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.12s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,8 +105,8 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    any_negative = balances[0] < -1\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "d625cb8e3507491ba32208467c3492ed", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 10, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3c1a95fca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3c1a95fca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.51s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "df23f309d3f04f68a7af8463e8a80737", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 11, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 23, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff502d57cd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff502d57cd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 29.42s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero >> (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.LEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "ef4f4c8be79b43ee8a5049ebdd088062", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa03710bd30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa03710bd30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.67s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -107,14 +107,14 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance == 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "eecc8c4d7ae04f5d99cf04244957cbb5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc29e213e50>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc29e213e50>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance >= 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length << 1 * -1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.00s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance >= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero << not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "9a7fafd9dc094a41b971bde341d8379a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mul", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 6, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [43, 12], "end_pos": [43, 33], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \ncloses: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.29s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -40,7 +40,7 @@\n       frac_prevs: SOp mapping an input to a sequence, where every element\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n-    bools = rasp.numerical(bools)\n+    bools = rasp.numerical(bools) * -1\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative * (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ^ (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices * -1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "d0730bbf8d374e208dc10306f43de544", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 13, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fab9452bca0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fab9452bca0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 28.67s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] != 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "6db282eb308941cf8476d701458defc3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Div", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_NotEq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f018a94fd60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f018a94fd60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.75s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) != 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative / (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "dcf8019161214d7da4917b8dc8ff2a91", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [20, 11], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.16s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -117,14 +117,14 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero >> (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "46c6da49bd2e4456bb17d1067a7779ba", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Div", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f10a2d5bd60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f10a2d5bd60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.01s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative / (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "718515401feb445f8643b36f6c2fb4c6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Pow", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [20, 11], "end_pos": [20, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 4, "start_pos": [70, 17], "end_pos": [70, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.48s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\") * -1\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -107,14 +107,14 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative ** (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "862977bee15b4bcb9c3a9c4dd0e778f0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_UAdd", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 18, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5f1692fd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5f1692fd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero // (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (+has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary +: 'Aggregate'\n\nsource/shuffle_dyck.py:134: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: ba...\n==================== 2 skipped, 1 warning, 1 error in 3.30s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,23 +114,23 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero // (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (+has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "ddbcf4b836394f0490d6f010fc2194ea", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 5, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f7230d1bdf0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f7230d1bdf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) > 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.22s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "38764ae663a9476789814d3c67e69339", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 23, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 16, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff9f4443d30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff9f4443d30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.24s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop > close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "56af29dcf7f44a4399baa81bcd2ddc35", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 25, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 28, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.32s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,16 +117,16 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    all_zero = balances[0] >= 0\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "e51fa0927be049119a39b1da32411fe7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 22, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f18d8e33ca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f18d8e33ca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) > 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 2.93s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero >> not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "9c6d91eb8128498e8f990deee3caa502", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 5, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 3, "start_pos": [135, 4], "end_pos": [135, 58], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f22e32fbca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f22e32fbca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.17s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero & not_has_neg).named(\"shuffle_dyck\") * -1\n "}]
[{"job_id": "256756e542714bda893df13b285bb046", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.27s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,10 +70,10 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop < close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -117,12 +117,12 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] != 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "8218a2defd814fe2b5e7f5540a173cc7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 28, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.94\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f991d633d90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f991d633d90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 19.75s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,10 +70,10 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop != close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance > 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "f7562eaa710a49d5808c2b328457f1c6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fcb4a617dc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fcb4a617dc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 1\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < -1)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.40s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "9b932786c21643b3bfc31e97a29c5f4f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Eq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f965842fdc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f965842fdc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 29.93s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) == 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] != 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "0fe4d2de9eef4954a730cb1a2516e12e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_FloorDiv", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd4b8f4fdf0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd4b8f4fdf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.46s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+    any_negative = balances[0] > 0\n+    for balance in []:\n+        any_negative = any_negative // (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "68dd7feec39a485f9be034658b7814e2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff96d3ebdf0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff96d3ebdf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[ 2:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 2.96s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "c14283a2edc84c33924499d6b9304dd2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 4, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.68\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9d16b1fd00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9d16b1fd00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 30.12s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 2))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero - not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "5bc120d29bcb42c2b52c4b371198c45b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3b9b52fdf0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3b9b52fdf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.46s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,10 +67,10 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop < close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] >= 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "af192654986c45de8736a402012ce391", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 15, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 5, "start_pos": [71, 12], "end_pos": [71, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.96s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -68,7 +68,7 @@\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n-    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n+    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\") * -1\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n@@ -105,8 +105,8 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    any_negative = balances[0] < -1\n+    for balance in []:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "cc292f1986d143babff1754306be7b29", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1bd10fbbb0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1bd10fbbb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 2.96s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop > open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -110,7 +110,7 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "858c9eb152134ec0be90e51d228cae3c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3ae8e23e50>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3ae8e23e50>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) > 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.25s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,12 +92,12 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -114,10 +114,10 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "a0165f36f43148ba8cb2ebbd72d531c6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_USub", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe626c03d00>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe626c03d00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) <= 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in []:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance != 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (-has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary -: 'Aggregate'\n\nsource/shuffle_dyck.py:134: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: ba...\n==================== 2 skipped, 1 warning, 1 error in 3.41s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -124,13 +124,13 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance != 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (-has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "b4d48b7dbc264d4da82ad84a4064a31a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 1, "start_pos": [100, 15], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5627207c40>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5627207c40>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert not len(pair) == 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.80s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert not len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero % (balance != -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "d0ebd3b73eb1486590dbeee404ad9a7f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 10, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f10807ffd90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f10807ffd90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.38s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop <= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices - 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero // not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "9999505b1ddc49c38c7e5f44da136410", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa41842fe20>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa41842fe20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.85s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -117,16 +117,16 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance >= 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length | 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "cd86ab6379aa44999285b0208f8fd1f6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1914803d90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1914803d90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert not len(pairs) >= 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.27s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) >= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "08fa75cc7a624d8c95014d448d172334", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.29s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop >= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "3cb3a6c6cbc84d9cb156c22346758e79", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9a8d5f7cd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9a8d5f7cd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < -1\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.04s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero // not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "d01ae0452fcd4d7b90d24fd5d419c58e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc1ab83bb80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc1ab83bb80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 37.23s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices + 1, rasp.indices - 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance <= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ** (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "cc4bf085db554765b50ef4d9e4a85599", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 7, "start_pos": [74, 13], "end_pos": [74, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.36s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,8 +70,8 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n-    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n+    bools_close = rasp.numerical(sop > close_token).named(\"bools_close\")\n+    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\") * -1\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n     return pair_balance.named(\"pair_balance\")\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length / 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "f7c2b0751d1e4fbdb34430e70e6dfaa5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 12, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc38ff17c40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc38ff17c40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 33.84s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop != open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "67b391248fb947a689df4cd9145ba71a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mod", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 13, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f32edc13dc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f32edc13dc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < -1\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.30s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < -1\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative % (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero + not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "ec06be03e318410ca9d6acb653d30708", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 5, "start_pos": [71, 12], "end_pos": [71, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbbd4d2fa60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbbd4d2fa60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert not len(pairs) >= 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.32s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -68,7 +68,7 @@\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n-    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n+    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\") * -1\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) >= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "18ebc87b91984cdb98147deb7bba93e9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc733b37d90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc733b37d90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.49s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "ad27b86205fe41508146cbb3d726e2ca", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_NotEq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbd9571fd60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbd9571fd60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) != 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.44s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) != 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero << (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length | 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "8302e042d06f499aabce6df56e7dbe9c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f770f5f3dc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f770f5f3dc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) <= 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[ -1] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "ccb1ce6f673b47f689747ad86b99d119", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Mul", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6ae5d1fd60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6ae5d1fd60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.85s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative * (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero / (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "4ffa23ec17a8492ba113933310f6e01e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 17, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 12, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.22s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop != open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,12 +117,12 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0) * -1).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "2c891b6b3d0c4947b375ef94ff7daf57", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 6, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f111f023bb0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f111f023bb0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.34s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -117,14 +117,14 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance <= 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "f392b55740b44b5a938adab2aa1a33ce", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9f84d33df0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9f84d33df0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 1\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.FALSE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.FALSE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "13222ac24ecc46e99ff438a76291ec47", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Pow", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc35b943d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc35b943d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length ** 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for ** or pow(): 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ** 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "4c51af06649c43cdaa4468c3b581fef3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 23, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd51b55bdc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd51b55bdc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.17s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop < open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -122,9 +122,9 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "8d8c589e1ad54da58028314bc72332a7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 20, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 23, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb51c91fd90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb51c91fd90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert not len(pairs) >= 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.32s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop < close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) >= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "e89f94ee78cc45819bc07550fd4cf60d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [20, 4], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f0117333e50>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f0117333e50>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[ -1] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.29s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "73ec0cb8dc3a4b799c9590e81171fca2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_RShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.35s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,8 +106,8 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+    for balance in []:\n+        any_negative = any_negative >> (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero | not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "e2c6882b789b4c08b91f6e4e7d90bc8e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 16, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 21, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fae8b72fca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fae8b72fca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.52s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < 1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3f9c86d8b8094fb8818a492d21b27c2d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 15, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd19f11bd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd19f11bd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.42s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -106,8 +106,8 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+    for balance in balances[ 0:]:\n+        any_negative = any_negative | (balance <= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "3a0f38d241f9435caede4e9cb2754913", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 13, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [77, 4], "end_pos": [77, 45], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.7\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f68f9ffbcd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f68f9ffbcd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 29.17s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,14 +67,14 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop <= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n-    return pair_balance.named(\"pair_balance\")\n+    return pair_balance.named(\"pair_balance\") * -1\n \n \n def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero | not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "750c3b75c8ae40ccb4ca181c920ca7ec", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 6, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 17, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f61ea237ca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f61ea237ca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 2.31s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < -1\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "16732c55a74b4805a419fa416209360b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 5, "start_pos": [71, 12], "end_pos": [71, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3104b5fd90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3104b5fd90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[ 2:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance < 0)\n    \n>       select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.49s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -68,7 +68,7 @@\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n-    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n+    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\") * -1\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance < 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "667c6ba50c624e2e922df6a7dacaf066", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 4, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc24b20bd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc24b20bd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] > 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.02s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 2))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] > 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "648baefee6e04a729b6a10a59be313ef", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Sub", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 5, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe2d9343d30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe2d9343d30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 22.55s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,10 +70,10 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop <= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, not 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative - (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "cca41a43546345e388d05763fc4e0e0b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_LtE", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f36d6de3bb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f36d6de3bb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.58s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) <= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero + (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "c5c9aa35679f4dff92d1f0c75b36b177", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 3, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc4b6e43af0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc4b6e43af0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 19.51s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero * not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "f6a8cb86ae3941be8f2595749944a7ec", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 5, "start_pos": [71, 12], "end_pos": [71, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.21s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -68,9 +68,9 @@\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n-    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n+    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\") * -1\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop != close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices * -1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named("}]
[{"job_id": "b7cf5a2dfe3d4371904a06e581d270f6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "be3d973825f64e7cb72089b020e7884b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 26, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 9, "start_pos": [113, 19], "end_pos": [115, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.21s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -105,14 +105,14 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] != 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n-    )\n+    ) * -1\n \n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "b2d33e9617824273976727e8f4479ebb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 24, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 5, "start_pos": [71, 12], "end_pos": [71, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nbalance_(): LinearSequenceMap only supports numerical inputs/outputs.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.23s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -68,7 +68,7 @@\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n-    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n+    opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\") * -1\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n@@ -107,14 +107,14 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance <= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.GT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "8062d5f4dd43459d8ad34ce9e0628758", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitAnd", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 22, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f7e4c34bc70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f7e4c34bc70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative << (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 1\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.00s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "20c77abc3e8c424c90150174c18b9869", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4136827d90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4136827d90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.58s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) >= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] > 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ** (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "5ca255ff9f504c8aa0579da6a9c32d72", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 3, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f45a352fd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f45a352fd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.22s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.GT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance > 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "8ac5c5cfde71403bbb0cf279f1776024", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [20, 4], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.54\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f206fc37eb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f206fc37eb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 31.85s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] <= -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "12507ad8faf54cb5a04f2fdf8b459e11", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 26, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 27, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.78\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f293e20fdc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f293e20fdc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.55s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -122,15 +122,15 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.TRUE).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero | not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "88741778640f49e7a9085027f41730fc", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 23, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [45, 11], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f74bfa1bd90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f74bfa1bd90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) != 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.45s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) != 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "64ed0abb7f154724bcb920b0a17da727", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [45, 4], "end_pos": [45, 86], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f604214fcd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f604214fcd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n>       all_zero = balances[ 1] == 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:125: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length // 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "f362f62609234121bb26a3021fe3b873", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 28, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.74\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f681abffd00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f681abffd00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.27s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "15090b973580488fb8dd8d11d99c07db", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 6, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.35s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.FALSE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance != 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] != 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "d10ed87ff69c4a14a433f5494fbe2df8", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Sub", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f72ecb47e20>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f72ecb47e20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) > 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.23s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -107,14 +107,14 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative - (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "52464388df9d4e82b1477b0af29f7d83", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 4, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [45, 4], "end_pos": [45, 86], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [17, 24], "end_pos": [19, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.64\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbbeb1f7f70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fbbeb1f7f70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 28.47s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens * -1, rasp.tokens, rasp.Comparison.GEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance >= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "2498fa0fe36e4a57bdf701bf4d81dc05", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.62s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero / not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "e24e914cda2d4f78a6d2c258dba3dcd0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 25, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f173b963d90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f173b963d90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] <= 0\n        for balance in balances[ 0:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero << not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for <<: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.41s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -122,8 +122,8 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    all_zero = balances[0] <= 0\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero << not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "6c726f23f5d340ec91df30d259515819", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 0, "start_pos": [17, 24], "end_pos": [19, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4c50d4ff10>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4c50d4ff10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] <= 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for ^: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.46s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens * -1, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] <= 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "1be945394c274202872342bb9323fa8c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [20, 4], "end_pos": [20, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [20, 11], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff06affbee0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff06affbee0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1 * -1\n \n \n length = make_length()\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero + not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "4b192b5cacfd4a38864eb6a761c15ca1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Add", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 22, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.16s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,8 +106,8 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+    for balance in []:\n+        any_negative = any_negative + (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,12 +117,12 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "0b6fdba4030742dea0a3736d2ef6db7b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 13, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f45baa43d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f45baa43d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:73: in make_pair_balance\n    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.46s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,10 +70,10 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop is not close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -129,7 +129,7 @@\n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\") * -1\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "5e01eb6127d24d8c8c8c0251821d7e0d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_FloorDiv", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe12d827cd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe12d827cd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.24s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools * -1, default=0)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -105,16 +105,16 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative // (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "6e2d040ba4714c0abd9760045a278028", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 20, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd55a133ee0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd55a133ee0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = True, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.49s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,13 +67,13 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -122,9 +122,9 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance <= 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "9766cba78ac8415d9ae5ab1a912f1014", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 1, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 8, "start_pos": [76, 19], "end_pos": [76, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.73s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= -1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -70,10 +70,10 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop <= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1)) * -1\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp"}]
[{"job_id": "c9f2ec63203b4da786297ae248adb9d3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.31s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0) * -1).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance >= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "891df4e1b672429892897eb162a7d935", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_UAdd", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fdf947efc10>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fdf947efc10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] == 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (+has_neg).named(\"not_has_neg\")\nE       TypeError: bad operand type for unary +: 'Aggregate'\n\nsource/shuffle_dyck.py:134: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: ba...\n==================== 2 skipped, 1 warning, 1 error in 3.27s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, not 1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] == 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (+has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "bbc0fbc1ca99465893cc79573a9f493d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Pow", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 8, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f563c5ffca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f563c5ffca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 2.73s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, +1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -105,9 +105,9 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative ** (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "e99ae5fdcbb84b77ae423f148b45b51b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 8, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 24, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 26, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f7d6852bdf0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f7d6852bdf0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.39s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -123,8 +123,8 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+    for balance in []:\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "293360d4c1b441378a4e5d3b7c4a79f9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 23, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7efd6b403df0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7efd6b403df0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -106,8 +106,8 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+    for balance in []:\n+        any_negative = any_negative | (balance > 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "c90d5c3a10cc46fe8b915a6642a57aa1", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_USub", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 8, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f809704bee0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f809704bee0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 3\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.38s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] > 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "fa4d61b5856047dd9d8c7eb09c0485e7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 24, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.54\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fcc5f237c10>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fcc5f237c10>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.75s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop >= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] <= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length / 1, rasp.Comparison.GT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "653b6d0987a446f691d405356869c5ba", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 6, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f75dc833c70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f75dc833c70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 2.80s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.FALSE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero / (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "7586e62c333a4a52b6e5ad3c899edabf", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Div", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 17, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fec8f403eb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fec8f403eb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.76s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance < 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length / 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "2542670f7844452198a549a3b43d261c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb9f695fdc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb9f695fdc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero << not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for <<: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.17s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero << not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "dcc31349d55b412aab30fb5a94d489e6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Invert", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb27ed1fcd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb27ed1fcd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 1\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == -1\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.30s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, ~1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "153225c97be8454e9a2ef118b3d31cda", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 21, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 26, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.18s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -122,9 +122,9 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero // (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "a15a983ab93d4f4b914e589a5caee8d0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_UAdd", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 3, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 21, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 21, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.88\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f59f923fd60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f59f923fd60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 21.17s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, +1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "d4227a04007d453988e351047b9639ad", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 18, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.28s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices + 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -114,10 +114,10 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.FALSE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "69af5a8b88b8428bb0dc00ee444ead6f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitAnd", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 6, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [45, 11], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff854223d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7ff854223d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.23s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length & 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "996a75adddff41ac8399053913903ce2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Eq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 9, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 6, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f112a95fdc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f112a95fdc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) == 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.22s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop < open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -92,12 +92,12 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) == 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices * -1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "c5179535af614d7b8cd59b699081de90", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitXor", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 18, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nopens: Numerical aggregate only supports 0 as default value.\ncloses: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.29s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= 1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative ^ (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,14 +117,14 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance > 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "efa8fd289f194d6591a221e7ddd711c3", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Eq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 0, "start_pos": [20, 11], "end_pos": [20, 64], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.78\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f2e2010fe50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f2e2010fe50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 29.28s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) == 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "faa593d8e56a4082bb07b86451eaa125", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 2, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7eff4e34fca0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7eff4e34fca0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 33.78s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices + 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 2))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance <= 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -129,7 +129,7 @@\n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero * -1).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "13d9ecd3a04d4f50b7486d9466c387c7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa24375fd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa24375fd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.27s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default= -1)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 0, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default=0)).named(\n         \"has_neg\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "b815c9b260b8433d800b4ec5ea42a18e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 13, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [43, 12], "end_pos": [43, 33], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1792a07c70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1792a07c70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < -1\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in []:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero % not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for %: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -40,7 +40,7 @@\n       frac_prevs: SOp mapping an input to a sequence, where every element\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n-    bools = rasp.numerical(bools)\n+    bools = rasp.numerical(bools) * -1\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "eddace53d81d45019912a3a854d1f612", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Add", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 1, "start_pos": [100, 15], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 6, "start_pos": [73, 18], "end_pos": [73, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f0bd91ffc70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f0bd91ffc70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert not len(pair) == 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.44s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,10 +70,10 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\") * -1\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert not len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative + (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "2f7361fbd71448eea97735945388a5df", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_FloorDiv", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 2, "start_pos": [44, 12], "end_pos": [44, 72], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 6, "start_pos": [73, 18], "end_pos": [73, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f0e253e3d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f0e253e3d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for //: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.33s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices * -1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\") * -1\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length // 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero | not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "09b2987f3f974d17b608ddb81b0bc23a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 1, "start_pos": [100, 15], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 20, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f94726ffd90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f94726ffd90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert not len(pair) == 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.21s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop != close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert not len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.FALSE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "2c0a9d2a0173400ab1c8b47578fe71f5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 0, "start_pos": [99, 16], "end_pos": [99, 21], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 13, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8e1cd4fd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8e1cd4fd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in []:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[0] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -96,7 +96,7 @@\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n-    for pair in pairs:\n+    for pair in []:\n         assert len(pair) == 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n@@ -122,14 +122,14 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\") * -1\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "04a2e940ea1c4c4cb967dedc0056211c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 7, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 19, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.9\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa0ed347cd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa0ed347cd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 30.97s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,12 +92,12 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) >= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "f0d18e62317b4f3187103446096244e6", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 24, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 12, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.30s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -110,7 +110,7 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n \n@@ -123,10 +123,10 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+    for balance in balances[ 2:]:\n+        all_zero = all_zero / (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.GT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "91a00d2b43a54d58acf18244e9765e93", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_LtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_LtE", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 15, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f914cb2bbe0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f914cb2bbe0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) <= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] <= 0\n        for balance in balances[ 0:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n>       all_zero = balances[ 1] == 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:125: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.38s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) <= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -105,8 +105,8 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    any_negative = balances[0] <= 0\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "337176ac6f92430596f7adef52448b12", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 4, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 1, "start_pos": [17, 24], "end_pos": [19, 32], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fccfba43e50>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fccfba43e50>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 29.97s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens * -1, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 2))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance < 1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero % (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "05ac79cb05bf4db7bb3e4c5bf5252048", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_Not", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9370f2bc10>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f9370f2bc10>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in []:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in []:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (not has_neg).named(\"not_has_neg\")\nE       AttributeError: 'bool' object has no attribute 'named'\n\nsource/shuffle_dyck.py:134: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.37s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -123,7 +123,7 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (not has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "e48d122d0e2b41308df94505728a6e19", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Sub", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 11, "start_pos": [120, 14], "end_pos": [122, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.78\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f514631bbb0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f514631bbb0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 30.94s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative - (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -119,14 +119,14 @@\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n         \"has_neg\"\n-    )\n+    ) * -1\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero | (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "6cc4de8e36374a53b4c2cbd46741aefe", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_FloorDiv", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Eq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Lt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 9, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f321a703b20>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f321a703b20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) < 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 2.97s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,12 +92,12 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) < 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative // (balance == 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "889734345b9d47508fbefcd20f1d845f", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_FloorDiv", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mod", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_Not", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa4b1833dc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa4b1833dc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative // (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (not has_neg).named(\"not_has_neg\")\nE       AttributeError: 'bool' object has no attribute 'named'\n\nsource/shuffle_dyck.py:134: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.23s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative // (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    not_has_neg = (not has_neg).named(\"not_has_neg\")\n+    return (last_zero % not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "74454be5bb674537aed458d48407879a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_RShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6b5cf2bdc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6b5cf2bdc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for >>: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop > close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length >> 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "61c0c1f8486040d39dbe8fd53e457f22", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd8f6b33ca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fd8f6b33ca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 2.70s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop < open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "0a4613a9e8914250b6743ceb239b1a88", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [20, 4], "end_pos": [20, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 2, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.66\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7faf0a35fe80>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7faf0a35fe80>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 33.03s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -124,12 +124,12 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero * -1).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "d6850791b78f42aa9989e90ddbf2b250", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 18, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "5e4ad7d3a178400590f5c2af77ed2bf7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 21, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 17, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 12, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.09s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -114,15 +114,15 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0) * -1).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "57ee826cb75d4acfa784dac18334c107", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 13, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 1, "start_pos": [43, 12], "end_pos": [43, 33], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f403d92bd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f403d92bd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] >= -1\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -40,7 +40,7 @@\n       frac_prevs: SOp mapping an input to a sequence, where every element\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n-    bools = rasp.numerical(bools)\n+    bools = rasp.numerical(bools) * -1\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] >= -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "3915bb48ab514dfb90ae59f89936e5db", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f494351fd90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f494351fd90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) > 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.42s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) > 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ^ (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "8cf76a5f44a542c2b7013c2890b1802d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Lt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 21, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5ebe54fd30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5ebe54fd30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 18.95s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) < 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "e42b7584944242259691e48b89073822", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 21, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7feffa7f7d00>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7feffa7f7d00>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 29.19s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -122,9 +122,9 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ -1] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero * (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "ba4543ec2fa84bdf933e8e9f831a2a84", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f39a47e7cd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f39a47e7cd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.36s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero * not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "50e7ab5d7c8f415fba56c5cc90b5d2f0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 15, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 20, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 26, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 13, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f44c835bd00>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f44c835bd00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[ 0:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n>       all_zero = balances[ 1] == 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:125: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.31s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -122,14 +122,14 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == 1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\") * -1\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "defad300fc794b35b9e16971ae1f3e66", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f88fe007d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f88fe007d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.29s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,12 +92,12 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 3\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero / (balance != 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "b0445d6997b2488880c37c0a7ebbfb6b", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 12, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 27, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4202d4bcd0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f4202d4bcd0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.42s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop <= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < 1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero - (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.TRUE).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "7cfa1e84e7464a0eaade2b224866edbf", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 6, "start_pos": [108, 33], "end_pos": [108, 34], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [77, 4], "end_pos": [77, 45], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.36s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -74,7 +74,7 @@\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n-    return pair_balance.named(\"pair_balance\")\n+    return pair_balance.named(\"pair_balance\") * -1\n \n \n def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[0] < -1\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -114,10 +114,10 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "cf7490b0b3e04ab493485b19eca146b2", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitOr", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 26, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 0, "start_pos": [20, 4], "end_pos": [20, 64], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 5, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb8ae33bdf0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb8ae33bdf0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 29.02s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -17,7 +17,7 @@\n     all_true_selector = rasp.Select(\n         rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n     ).named(\"all_true_selector\")\n-    return rasp.SelectorWidth(all_true_selector).named(\"length\")\n+    return rasp.SelectorWidth(all_true_selector).named(\"length\") * -1\n \n \n length = make_length()\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices * -1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length | 1, rasp.Comparison.NEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "0ffe89a8a76448868200cb657714d183", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_GtE", "occurrence": 0, "start_pos": [108, 31], "end_pos": [108, 32], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 11, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 2, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8583347c40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8583347c40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.43s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] >= 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -124,12 +124,12 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ^ (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero * -1).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "c502e783e3a34db9928135934d963a22", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_LShift", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 22, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 14, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5fbc55fa90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5fbc55fa90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.LT).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero << not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for <<: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.55s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -110,7 +110,7 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n \n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero << not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "a9914933dd7b4a09b8118a0429ca801c", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 27, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 4, "start_pos": [70, 17], "end_pos": [70, 70], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 13, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.99s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\") * -1\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -126,10 +126,10 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.TRUE).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\") * -1\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "11453530361444c0889e8d1334ab5142", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 7, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 1, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.23s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative * -1, default= 1)).named(\n         \"has_neg\"\n     )\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero / not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "276b4795881441c6952a778471e2c989", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f31805fbd00>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f31805fbd00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero ** (balance != 0)\n    \n>       select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.27s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -117,16 +117,16 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero ** (balance != 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "223a756fced148d5a42c722b5d26c69a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 2, "start_pos": [76, 76], "end_pos": [76, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 3, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.32s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0) * -1).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, - 0))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero / (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "387ee305d6c1412f93dc0e43d1bfa2f0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 7, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 11, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 13, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.04\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa49844bd60>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fa49844bd60>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.94s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop != open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "2e4658b126934f5c80a0ab5ffea667d4", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 9, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 4, "start_pos": [100, 28], "end_pos": [100, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f751f4ffc70>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f751f4ffc70>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) == 1\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.11s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop <= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) == 1\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n "}]
[{"job_id": "96142f1217d84e4c9c6bf2bb2b1dc2fe", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 23, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ss('Attention patterns can currently only average binary variables. Not:', {0, -1})\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.23s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -110,11 +110,11 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices + 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LEQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "e009299ac1204ae8895b049043365dab", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 0, "start_pos": [45, 63], "end_pos": [45, 64], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "27c7ff95ac2a482095f5175571d24fd0", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 22, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.5\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5db8327dc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5db8327dc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 27.09s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.LT).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero - not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "1efffebe7a80401b903ec9a527e36310", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Add", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 7, "start_pos": [74, 13], "end_pos": [74, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f53b7be7d90>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f53b7be7d90>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative + (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ^: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.31s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,11 +67,11 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop < open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n-    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n+    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\") * -1\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n     return pair_balance.named(\"pair_balance\")\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative + (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "7619b55b4fa648f980f32ceb7ff0f144", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 0, "start_pos": [45, 26], "end_pos": [45, 65], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1180953cd0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1180953cd0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero // not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for //: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.41s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools * -1, default=0)).named(\"frac_prevs\")\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, not 1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero // not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "982a4278d30f4a1294b6543027659e4e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Pow", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Eq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 8, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 4, "start_pos": [70, 17], "end_pos": [70, 70], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb440effd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb440effd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) == 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ** or pow(): 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 2.83s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\") * -1\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) == 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ** not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "af4602a9ecd34920b1f9275ade982146", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 10, "start_pos": [125, 24], "end_pos": [125, 25], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 0, "start_pos": [44, 24], "end_pos": [44, 36], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7feb18763df0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7feb18763df0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 0\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) >= 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n>       all_zero = balances[ 1] == 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:125: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,12 +92,12 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) >= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[ 1] == 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "97b143179a794ad0a7e1f1c2b1e454f8", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_NotEq", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 15, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 1, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 9, "start_pos": [113, 19], "end_pos": [115, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: An aggregate's output encoding must match its input encoding. Input: Encoding.NUMERICAL   Output: Encoding.CATEGORICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 2.95s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -107,14 +107,14 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance != 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n-    )\n+    ) * -1\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LT).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "8c4e92edb8bb4da4a55f94c0bce5c7c9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 28, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [45, 4], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7feed0c07ca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7feed0c07ca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) != 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.23s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) != 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == 1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 2, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "a2fbf8385e54485f8ce38e10315fe5b7", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_Not", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 2, "start_pos": [76, 72], "end_pos": [76, 73], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 7, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f46df003e20>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f46df003e20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 0\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (not has_neg).named(\"not_has_neg\")\nE       AttributeError: 'bool' object has no attribute 'named'\n\nsource/shuffle_dyck.py:134: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 2, -1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n@@ -131,6 +131,6 @@\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (not has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "90dba4f0842b4fa59e8b2a692d1abfaa", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Add", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.78\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb3dc547dc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fb3dc547dc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 25.62s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop <= open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length + 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "9357f3d6614345a799413e08fcc19d1e", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_IsNot", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Lt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3632f47ca0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f3632f47ca0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) < 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.27s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is not open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) < 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] > 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "9e2689cb9a07439fa4701580b835d332", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitXor", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 2, "start_pos": [126, 19], "end_pos": [126, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 7, "start_pos": [74, 13], "end_pos": [74, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fccbb53bdc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fccbb53bdc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in []:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices, length - 1 * -1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n        not_has_neg = (~has_neg).named(\"not_has_neg\")\n>       return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\nE       TypeError: unsupported operand type(s) for ^: 'Aggregate' and 'Map'\n\nsource/shuffle_dyck.py:135: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.60s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -71,7 +71,7 @@\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n-    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n+    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\") * -1\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n     return pair_balance.named(\"pair_balance\")\n@@ -123,14 +123,14 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero ^ not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "0b0c473eab2c4caeb8a5af06eaf5637a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_BitAnd", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 13, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5fc83f3dc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f5fc83f3dc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 30.89s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop <= close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative / (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named("}]
[{"job_id": "a48fdd258d54487f8ba4e4f406ae01f8", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 10, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 12, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8273f3bd60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8273f3bd60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) >= 2\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.NEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 2\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "1ff0adab54934dc18b809055a7d4f743", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 11, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 9, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 2, "start_pos": [77, 4], "end_pos": [77, 45], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.28s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -74,7 +74,7 @@\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n-    return pair_balance.named(\"pair_balance\")\n+    return pair_balance.named(\"pair_balance\") * -1\n \n \n def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -114,10 +114,10 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= 1)).named(\n         \"has_neg\"\n     )\n "}]
[{"job_id": "bd2cbc847a7347fa84923fd242263e46", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Div", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 29, "start_pos": [129, 53], "end_pos": [129, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 4, "start_pos": [117, 17], "end_pos": [119, 5], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 2, "start_pos": [45, 11], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.64\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe67ef4bd30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe67ef4bd30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 34.05s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -107,14 +107,14 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative / (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices * -1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 0, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "fbbfa93f990047ec8dbe1efbecb770bf", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_USub_Not", "occurrence": 0, "start_pos": [76, 75], "end_pos": [76, 76], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 10, "start_pos": [113, 34], "end_pos": [113, 69], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\nhas_neg: Numerical aggregate only supports 0 as default value.\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.54s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -73,7 +73,7 @@\n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n-    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n+    pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, not 1))\n     return pair_balance.named(\"pair_balance\")\n \n \n@@ -110,19 +110,19 @@\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n-    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n+    any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative) * -1).named(\n         \"any_negative\"\n     )\n \n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] >= 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "fc83dd6c959542209cf149afd5d8daea", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 15, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 7, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.96\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7eff46557c70>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7eff46557c70>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 40.08s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance < 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "298b22479fb94fbda1fd01bbe1dbdeec", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 14, "start_pos": [109, 28], "end_pos": [109, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 23, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f11de527d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f11de527d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n>           assert len(pair) != 2\nE           AssertionError\n\nsource/shuffle_dyck.py:100: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.28s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop > close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) != 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 2:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "ff853f7338024d0cbf8d11497c283707", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_BitXor", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Mul", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Lt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6896f53d00>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6896f53d00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance < 0)\n    \n>       select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for ^: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.26s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop < close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -124,13 +124,13 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance < 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length ^ 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero * not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "da536a370e1241c9a3b1202e113865a9", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 27, "start_pos": [127, 42], "end_pos": [127, 43], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f06cd823df0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f06cd823df0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] != 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == -1)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.30s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] != 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance == -1)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "ad11452b8be1421b8c6459e653576cc5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 1, "start_pos": [73, 37], "end_pos": [73, 39], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_Not", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 4, "start_pos": [129, 30], "end_pos": [129, 42], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f37d9923dc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f37d9923dc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n        select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\n        last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n    \n>       not_has_neg = (not has_neg).named(\"not_has_neg\")\nE       AttributeError: 'bool' object has no attribute 'named'\n\nsource/shuffle_dyck.py:134: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.12s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -70,7 +70,7 @@\n     bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n-    bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n+    bools_close = rasp.numerical(sop != close_token).named(\"bools_close\")\n     closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n@@ -126,11 +126,11 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices + 1, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    not_has_neg = (not has_neg).named(\"not_has_neg\")\n+    return (last_zero + not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "3c2af021dedd4983a5c6adf9d29de758", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Gt", "occurrence": 3, "start_pos": [125, 27], "end_pos": [125, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 1, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc6387fbd30>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc6387fbd30>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] > 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.41s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LT\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -122,11 +122,11 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] > 0\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "0811f3a018a64ea8bf016506f87f788a", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Div", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_RShift", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssdivision by zero\nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.28s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero >> (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero / not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "c69fd53058c749eebc898e23e7f0ef18", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Delete_Invert", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}]}, {"worker_outcome": "no-test", "output": null, "test_outcome": null, "diff": null}]
[{"job_id": "2e26e7808c6e4f4eb3421459b82af68d", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_FloorDiv", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 14, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 8, "start_pos": [110, 49], "end_pos": [110, 50], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.88\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f069a92bdc0>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f069a92bdc0>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 26.69s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -107,14 +107,14 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative // (balance > -1)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "27452f3224ae407a8eab2c1a1cb57ced", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Eq", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 18, "start_pos": [117, 57], "end_pos": [117, 77], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-return-stmt", "occurrence": 1, "start_pos": [45, 4], "end_pos": [45, 86], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.7\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f015e043c40>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f015e043c40>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 31.93s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -42,7 +42,7 @@\n     \"\"\"\n     bools = rasp.numerical(bools)\n     prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n-    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n+    return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\") * -1\n \n \n def make_pair_balance(sop: rasp.SOp, open_token: str, close_token: str) -> rasp.SOp:\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) == 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -105,7 +105,7 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ -1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named("}]
[{"job_id": "99145f8d4ced4765947e3d5ed60e6934", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ZeroIterationForLoop", "occurrence": 1, "start_pos": [109, 19], "end_pos": [109, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 1, "start_pos": [44, 38], "end_pos": [44, 50], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f2162f27d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f2162f27d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in []:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1 * -1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.35s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices - 1, rasp.Comparison.LEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -106,7 +106,7 @@\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n-    for balance in balances[1:]:\n+    for balance in []:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "21a12e1142b849d19224bbe75c8e04ae", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_NotEq", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_LtE", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-integer", "occurrence": 5, "start_pos": [108, 28], "end_pos": [108, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 9, "start_pos": [113, 19], "end_pos": [115, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f098621bd00>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f098621bd00>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) <= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n>       any_negative = balances[ 1] < 0\nE       IndexError: list index out of range\n\nsource/shuffle_dyck.py:108: IndexError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - IndexError: l...\n==================== 2 skipped, 1 warning, 1 error in 2.79s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop != open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) <= 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -105,14 +105,14 @@\n         balances.append(balance)\n \n     # Check if balances where negative anywhere -> parentheses not balanced\n-    any_negative = balances[0] < 0\n+    any_negative = balances[ 1] < 0\n     for balance in balances[1:]:\n         any_negative = any_negative | (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n         \"any_negative\"\n-    )\n+    ) * -1\n \n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\""}]
[{"job_id": "e0c6426ccfc84e13a5909fb5907f19eb", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mul", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 2, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-rasp-indices", "occurrence": 2, "start_pos": [117, 29], "end_pos": [117, 41], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.74\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1870353d30>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f1870353d30>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 33.59s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.LEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices - 1, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length * 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "7ebc3814f7604ff19536831457901372", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_Mod", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_Div", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 19, "start_pos": [120, 78], "end_pos": [120, 79], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 10, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6704d17e20>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f6704d17e20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative / (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[1:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for %: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.29s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GT)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative / (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -117,7 +117,7 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default= -1)).named(\n         \"has_neg\"\n     )\n \n@@ -126,7 +126,7 @@\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length % 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "199a85092c154f9093238fb2a9319b95", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_FloorDiv", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/AddNot", "occurrence": 0, "start_pos": [95, 11], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 3, "start_pos": [95, 25], "end_pos": [95, 26], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-aggregate-value", "occurrence": 2, "start_pos": [132, 16], "end_pos": [132, 72], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f68051ffdc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f68051ffdc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert not len(pairs) >= 0\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.34s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert not len(pairs) >= 0\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -124,12 +124,12 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero // (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n-    last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n+    last_zero = rasp.Aggregate(select_last, all_zero * -1).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")"}]
[{"job_id": "3f6474ccf97d4374ac5c78ec60c78788", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Sub", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_LtE", "occurrence": 2, "start_pos": [100, 25], "end_pos": [100, 27], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 11, "start_pos": [44, 52], "end_pos": [44, 71], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 12, "start_pos": [120, 29], "end_pos": [120, 80], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssUnsupported RASP expressions:\naggregate: An aggregate's output encoding must match its input encoding. Input: Encoding.CATEGORICAL   Output: Encoding.NUMERICAL  \nUNCOMPILABLE MODEL\n.\n\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=================== 1 passed, 2 skipped, 1 warning in 3.24s ====================\n", "test_outcome": "survived", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -41,7 +41,7 @@\n         is the fraction of previous \"True\" tokens.\n     \"\"\"\n     bools = rasp.numerical(bools)\n-    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.LEQ)\n+    prevs = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.GEQ)\n     return rasp.numerical(rasp.Aggregate(prevs, bools, default=0)).named(\"frac_prevs\")\n \n \n@@ -97,7 +97,7 @@\n     # Compute running balance of each type of parenthesis\n     balances = []\n     for pair in pairs:\n-        assert len(pair) == 2\n+        assert len(pair) <= 2\n         open_token, close_token = pair\n         balance = make_pair_balance(\n             rasp.tokens, open_token=open_token, close_token=close_token\n@@ -117,14 +117,14 @@\n     select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n-    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n+    has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0) * -1).named(\n         \"has_neg\"\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero - (balance == 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\""}]
[{"job_id": "5fad6475882046409218fd35d6ba8866", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitOr_LShift", "occurrence": 0, "start_pos": [110, 36], "end_pos": [110, 37], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_BitOr", "occurrence": 1, "start_pos": [135, 22], "end_pos": [135, 23], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_GtE", "occurrence": 4, "start_pos": [127, 39], "end_pos": [127, 41], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 5, "start_pos": [18, 34], "end_pos": [18, 54], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssAccuracy:  0.6\nF\n\n=================================== FAILURES ===================================\n__________________________ TestShuffleDyck.test_model __________________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe8bf3ffd90>\n\n    def test_model(self):\n>       self.test()\n\ntests/test_shuffle_dyck.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fe8bf3ffd90>\n\n    @pytest.mark.skip(reason=\"This is not a test\")\n    def test(self):\n        try:\n            model = Model(self.model, self.inputs, self.maxLength, self.name)\n        except Exception as e:\n            # Survive if the model is not compilable (we want to kill the buggy ones)\n            print(str(e))\n            # Print message for post-processing\n            print(\"UNCOMPILABLE MODEL\")\n            return\n    \n        accuracy = model.evaluateModel(\n            self.testing_data, doPrint=False, outputArray=False, useAssert=False\n        )\n        # Print the accuracy for post-processing\n        print(\"Accuracy: \", accuracy)\n>       assert accuracy == 1.0\nE       AssertionError\n\ntests/test.py:47: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n=================== 1 failed, 2 skipped, 1 warning in 28.52s ===================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -15,7 +15,7 @@\n         is the length of that sequence.\n     \"\"\"\n     all_true_selector = rasp.Select(\n-        rasp.tokens, rasp.tokens, rasp.Comparison.TRUE\n+        rasp.tokens, rasp.tokens, rasp.Comparison.NEQ\n     ).named(\"all_true_selector\")\n     return rasp.SelectorWidth(all_true_selector).named(\"length\")\n \n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative << (balance < 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -124,7 +124,7 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero & (balance >= 0)\n \n     select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n         \"select_last\"\n@@ -132,5 +132,5 @@\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n     not_has_neg = (~has_neg).named(\"not_has_neg\")\n-    return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n+    return (last_zero | not_has_neg).named(\"shuffle_dyck\")\n "}]
[{"job_id": "4921091fdc6a4a60a0b4b1dd43675d86", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_BitAnd_Add", "occurrence": 0, "start_pos": [127, 28], "end_pos": [127, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Eq_Is", "occurrence": 0, "start_pos": [70, 36], "end_pos": [70, 38], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/increment-rasp-indices", "occurrence": 3, "start_pos": [117, 43], "end_pos": [117, 55], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-select", "occurrence": 7, "start_pos": [129, 18], "end_pos": [131, 5], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc177153dc0>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fc177153dc0>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsource/shuffle_dyck.py:102: in make_shuffle_dyck\n    balance = make_pair_balance(\nsource/shuffle_dyck.py:70: in make_pair_balance\n    bools_open = rasp.numerical(sop is open_token).named(\"bools_open\")\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:721: in numerical\n    return annotate(sop, encoding=Encoding.NUMERICAL)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpr = False, annotations = {'encoding': <Encoding.NUMERICAL: 'numerical'>}\n\n    def annotate(expr: RASPExprT, **annotations) -> RASPExprT:\n      \"\"\"Creates a new expr with added annotations.\"\"\"\n>     new = expr.copy()\nE     AttributeError: 'bool' object has no attribute 'copy'\n\n../../.venv/lib/python3.10/site-packages/tracr/rasp/rasp.py:160: AttributeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AttributeErro...\n==================== 2 skipped, 1 warning, 1 error in 3.43s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -67,7 +67,7 @@\n       pair_balance: SOp mapping an input to a sequence, where every element\n         is the fraction of previous open tokens minus previous close tokens.\n     \"\"\"\n-    bools_open = rasp.numerical(sop == open_token).named(\"bools_open\")\n+    bools_open = rasp.numerical(sop is open_token).named(\"bools_open\")\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n@@ -114,7 +114,7 @@\n         \"any_negative\"\n     )\n \n-    select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n+    select_all = rasp.Select(rasp.indices, rasp.indices + 1, rasp.Comparison.TRUE).named(\n         \"select_all\"\n     )\n     has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n@@ -124,9 +124,9 @@\n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n     for balance in balances[1:]:\n-        all_zero = all_zero & (balance == 0)\n+        all_zero = all_zero + (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length - 1 * -1, rasp.Comparison.EQ).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")"}]
[{"job_id": "6f6d17274022461a8ffa509632f455a5", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_Lt_Gt", "occurrence": 1, "start_pos": [110, 47], "end_pos": [110, 48], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceComparisonOperator_GtE_Gt", "occurrence": 0, "start_pos": [95, 22], "end_pos": [95, 24], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/decrement-integer", "occurrence": 11, "start_pos": [125, 30], "end_pos": [125, 31], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/negate-rasp-sop-constructor", "occurrence": 7, "start_pos": [74, 13], "end_pos": [74, 73], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8d3eb37d60>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7f8d3eb37d60>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n>       assert len(pairs) > 1\nE       AssertionError\n\nsource/shuffle_dyck.py:95: AssertionError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - AssertionError\n==================== 2 skipped, 1 warning, 1 error in 3.23s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -71,7 +71,7 @@\n     opens = rasp.numerical(make_frac_prevs(bools_open)).named(\"opens\")\n \n     bools_close = rasp.numerical(sop == close_token).named(\"bools_close\")\n-    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\")\n+    closes = rasp.numerical(make_frac_prevs(bools_close)).named(\"closes\") * -1\n \n     pair_balance = rasp.numerical(rasp.LinearSequenceMap(opens, closes, 1, -1))\n     return pair_balance.named(\"pair_balance\")\n@@ -92,7 +92,7 @@\n     Args:\n       pairs: List of pairs of open and close tokens that each should be balanced.\n     \"\"\"\n-    assert len(pairs) >= 1\n+    assert len(pairs) > 1\n \n     # Compute running balance of each type of parenthesis\n     balances = []\n@@ -107,7 +107,7 @@\n     # Check if balances where negative anywhere -> parentheses not balanced\n     any_negative = balances[0] < 0\n     for balance in balances[1:]:\n-        any_negative = any_negative | (balance < 0)\n+        any_negative = any_negative | (balance > 0)\n \n     # Convert to numerical SOp\n     any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n@@ -122,7 +122,7 @@\n     )\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n-    all_zero = balances[0] == 0\n+    all_zero = balances[0] == -1\n     for balance in balances[1:]:\n         all_zero = all_zero & (balance == 0)\n "}]
[{"job_id": "8d1400dba6ae4105810f7385d172e412", "mutations": [{"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceBinaryOperator_Sub_LShift", "occurrence": 0, "start_pos": [129, 51], "end_pos": [129, 52], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/ReplaceUnaryOperator_Invert_USub", "occurrence": 0, "start_pos": [134, 19], "end_pos": [134, 20], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "core/NumberReplacer", "occurrence": 25, "start_pos": [126, 28], "end_pos": [126, 29], "operator_args": {}}, {"module_path": "source/shuffle_dyck.py", "operator_name": "operators/replace-rasp-comparison", "occurrence": 22, "start_pos": [129, 56], "end_pos": [129, 74], "operator_args": {}}]}, {"worker_outcome": "normal", "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/andre-silva/RASPing\nconfigfile: pyproject.toml\nplugins: anyio-4.8.0\ncollected 3 items\n\ntests/test_shuffle_dyck.py ssE\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of TestShuffleDyck.test_model _________________\n\nself = <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fcf6c003b20>\nmethod = <bound method TestShuffleDyck.test_model of <tests.test_shuffle_dyck.TestShuffleDyck object at 0x7fcf6c003b20>>\n\n    def setup_method(self, method):\n>       self.__setup__(make_shuffle_dyck([\"()\"]), \"shuffle_dyck1\")\n\ntests/test_shuffle_dyck.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npairs = ['()']\n\n    def make_shuffle_dyck(pairs: List[str]) -> rasp.SOp:\n        \"\"\"Returns 1 if a set of parentheses are balanced, 0 else.\n    \n         (As implemented in the RASP paper.)\n    \n        Example usage:\n          shuffle_dyck2 = make_shuffle_dyck(pairs=[\"()\", \"{}\"])\n          shuffle_dyck2(\"({)}\")\n          >> [1, 1, 1, 1]\n          shuffle_dyck2(\"(){)}\")\n          >> [0, 0, 0, 0, 0]\n    \n        Args:\n          pairs: List of pairs of open and close tokens that each should be balanced.\n        \"\"\"\n        assert len(pairs) >= 1\n    \n        # Compute running balance of each type of parenthesis\n        balances = []\n        for pair in pairs:\n            assert len(pair) == 2\n            open_token, close_token = pair\n            balance = make_pair_balance(\n                rasp.tokens, open_token=open_token, close_token=close_token\n            ).named(f\"balance_{pair}\")\n            balances.append(balance)\n    \n        # Check if balances where negative anywhere -> parentheses not balanced\n        any_negative = balances[0] < 0\n        for balance in balances[1:]:\n            any_negative = any_negative | (balance < 0)\n    \n        # Convert to numerical SOp\n        any_negative = rasp.numerical(rasp.Map(lambda x: x, any_negative)).named(\n            \"any_negative\"\n        )\n    \n        select_all = rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.TRUE).named(\n            \"select_all\"\n        )\n        has_neg = rasp.numerical(rasp.Aggregate(select_all, any_negative, default=0)).named(\n            \"has_neg\"\n        )\n    \n        # Check if all balances are 0 at the end -> closed all parentheses\n        all_zero = balances[0] == 0\n        for balance in balances[ 0:]:\n            all_zero = all_zero & (balance == 0)\n    \n>       select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.LT).named(\n            \"select_last\"\n        )\nE       TypeError: unsupported operand type(s) for <<: 'SelectorWidth' and 'int'\n\nsource/shuffle_dyck.py:129: TypeError\n=============================== warnings summary ===============================\n../../.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1\n  /home/andre-silva/RASPing/.venv/lib/python3.10/site-packages/dockerpycreds/utils.py:1: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\n    import distutils.spawn\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_shuffle_dyck.py::TestShuffleDyck::test_model - TypeError: un...\n==================== 2 skipped, 1 warning, 1 error in 3.39s ====================\n", "test_outcome": "killed", "diff": "--- mutation diff ---\n--- asource/shuffle_dyck.py\n+++ bsource/shuffle_dyck.py\n@@ -123,14 +123,14 @@\n \n     # Check if all balances are 0 at the end -> closed all parentheses\n     all_zero = balances[0] == 0\n-    for balance in balances[1:]:\n+    for balance in balances[ 0:]:\n         all_zero = all_zero & (balance == 0)\n \n-    select_last = rasp.Select(rasp.indices, length - 1, rasp.Comparison.EQ).named(\n+    select_last = rasp.Select(rasp.indices, length << 1, rasp.Comparison.LT).named(\n         \"select_last\"\n     )\n     last_zero = rasp.Aggregate(select_last, all_zero).named(\"last_zero\")\n \n-    not_has_neg = (~has_neg).named(\"not_has_neg\")\n+    not_has_neg = (-has_neg).named(\"not_has_neg\")\n     return (last_zero & not_has_neg).named(\"shuffle_dyck\")\n "}]
